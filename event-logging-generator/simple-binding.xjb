<?xml version="1.0" encoding="UTF-8"?>
<jaxb:bindings
    xmlns:jaxb="https://jakarta.ee/xml/ns/jaxb"
    xmlns:inheritance="urn:jaxb.jvnet.org:plugin:inheritance"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:evt="event-logging:3"
    jaxb:extensionBindingPrefixes="inheritance"
    jaxb:version="3.0">

    <!--
        ~~~~~~~~~~
        IMPORTANT:
        ~~~~~~~~~~

        This binding file operates on the transient schema.mod.xsd file that is derived from the
        source schema (event-logging.xsd in the event-logging repo).  All types named
        XxxComplexType are renamed to Xxx in GenClasses.java.  This is to provide better java
        class names. E.g FooBarComplexType becomes FooBar. Thus any xpath queries in here
        must use the shorter form of the complex type names.
    -->

    <jaxb:bindings schemaLocation="schema/schema.mod.xsd" node="/xs:schema">

        <!-- localScoping to prevent nested classes -->
        <jaxb:globalBindings
            generateElementProperty="false"
            localScoping="toplevel">

            <jaxb:javaType
                name="java.util.Date"
                xmlType="xs:date"
                parseMethod="event.logging.jaxb.DateAdaptor.parseDate"
                printMethod="event.logging.jaxb.DateAdaptor.printDate" />
            <jaxb:javaType
                name="java.util.Date"
                xmlType="evt:DateTime"
                parseMethod="event.logging.jaxb.DateAdaptor.parseDate"
                printMethod="event.logging.jaxb.DateAdaptor.printDate" />
        </jaxb:globalBindings>


        <!-- Make the property name plural -->
        <jaxb:bindings node="xs:complexType[@name='AccessControlGroups']/xs:sequence/xs:element[@name='AccessControlGroup']">
            <jaxb:property name="accessControlGroups" />
        </jaxb:bindings>

        <!-- Make the property name plural -->
        <jaxb:bindings node="xs:complexType[@name='EventSource']//xs:element[@name='Door']//xs:element[@name='AddAccess']/xs:complexType/xs:sequence/xs:element[@name='AccessZone']">
            <jaxb:property name="accessZones" />
        </jaxb:bindings>

        <!-- Make the property name plural -->
        <jaxb:bindings node="xs:complexType[@name='Authorise']/xs:sequence/xs:element[@name='AddGroups']/xs:complexType/xs:sequence/xs:element[@name='Group']">
            <jaxb:property name="groups" />
        </jaxb:bindings>

        <!-- Make the property name plural -->
        <jaxb:bindings node="xs:complexType[@name='Approval']/xs:sequence/xs:element[@name='Approvers']/xs:complexType/xs:sequence/xs:element[@name='Approver']">
            <jaxb:property name="approvers" />
        </jaxb:bindings>

        <!-- TODO In Authorisations we have List<Auth> auth, which is not ideal, not sure what 'auth' is? -->

        <!-- Make the property name plural -->
        <jaxb:bindings node="xs:complexType[@name='Groups']/xs:sequence/xs:element[@name='Group']">
            <jaxb:property name="groups" />
        </jaxb:bindings>

        <!-- Make the property name plural -->
        <jaxb:bindings node="xs:complexType[@name='MetaDataTags']/xs:sequence/xs:element[@name='Tag']">
            <jaxb:property name="tags" />
        </jaxb:bindings>

        <!-- Make the property name plural -->
        <jaxb:bindings node="xs:group[@name='BaseObjectGroup']/xs:sequence/xs:element[@name='Permissions']/xs:complexType/xs:sequence/xs:element[@name='Permission']">
            <jaxb:property name="permissions" />

            <jaxb:bindings node="xs:complexType/xs:sequence">
                <jaxb:bindings node="xs:choice">
                    <jaxb:property name="permissionEntity" >
                        <jaxb:baseType name="PermissionEntity" />
                    </jaxb:property>
                </jaxb:bindings>
                <!-- Make the property name plural -->
                <jaxb:bindings node="xs:element[@name='Allow']">
                    <jaxb:property name="allowAttributes" />
                </jaxb:bindings>
                <!-- Make the property name plural -->
                <jaxb:bindings node="xs:element[@name='Deny']">
                    <jaxb:property name="denyAttributes" />
                </jaxb:bindings>
            </jaxb:bindings>
        </jaxb:bindings>

        <!-- Make the property name plural -->
        <jaxb:bindings node="xs:complexType[@name='Classification']/xs:sequence/xs:element[@name='PermittedNationalities']/xs:complexType/xs:sequence/xs:element[@name='Nationality']">
            <jaxb:property name="nationalities" />
        </jaxb:bindings>

        <!-- Make the property name plural -->
        <jaxb:bindings node="xs:complexType[@name='Authorise']//xs:element[@name='RemoveGroups']//xs:element[@name='Group']">
            <jaxb:property name="groups" />
        </jaxb:bindings>

        <!-- Make the property name plural -->
        <jaxb:bindings node="xs:complexType[@name='Approval']//xs:element[@name='Requestors']//xs:element[@name='Requestor']">
            <jaxb:property name="requestors" />
        </jaxb:bindings>

        <!-- make these types implement a common marker interface so we can have a single property -->
        <jaxb:bindings
            multiple="true"
            node="xs:complexType[@name='User' or @name='Device' or @name='Group']">

            <inheritance:implements>AuthenticationEntity</inheritance:implements>
        </jaxb:bindings>

        <!-- Make (User|Device)ComplexType classes implement Endpoint to make the choice
        in SendreceiveGroup/Source|Dest be List<Endpoint> instead of List<Object> -->
        <jaxb:bindings multiple="true" node="xs:complexType[@name='User' or @name='Device']">
            <inheritance:implements>Endpoint</inheritance:implements>
        </jaxb:bindings>

        <!-- make these types implement a common marker interface so we can have a single property -->
        <jaxb:bindings multiple="true" node="xs:complexType[@name='User' or @name='Group']">
            <inheritance:implements>PermissionEntity</inheritance:implements>
        </jaxb:bindings>

        <!-- make any top level complex types with an Outcome complexType element implement HasOutcome to
            make it easier to get the outcome from an action -->
        <jaxb:bindings multiple="true" node="xs:complexType[.//xs:element[@type='evt:Outcome' or @type='evt:CopyMoveOutcome' or @type='evt:AuthenticateOutcome'] or .//xs:group[@ref='evt:InstallationGroup']]">
            <inheritance:implements>HasOutcome</inheritance:implements>
        </jaxb:bindings>

        <!-- Change prop name from userOrDevice to endpoints-->
        <jaxb:bindings node="xs:group[@name='SendReceiveGroup']/xs:sequence">
            <jaxb:bindings
                multiple="true"
                node="xs:element[@name='Source' or @name='Destination']//xs:choice">

                <jaxb:property name="endpoints" >
                    <!-- Force it to be List<Endpoint> instead of List<java.lang.Object> -->
                    <jaxb:baseType name="Endpoint" />
                </jaxb:property>
            </jaxb:bindings>
        </jaxb:bindings>

        <!-- make these types implement a common marker interface so we can have a single property -->
        <jaxb:bindings multiple="true" node="xs:complexType[@name='Software' or @name='Hardware' or @name='Media']">
            <inheritance:implements>InstallationEntity</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:group[@name='InstallationGroup']/xs:sequence/xs:choice">
            <jaxb:property name="installationEntity" >
                <jaxb:baseType name="InstallationEntity" />
            </jaxb:property>
        </jaxb:bindings>



        <!--
            Rename all the choices in EventDetail (i.e the schema actions) to
            XxxxEventAction. This is partly for clarity but also to avoid some name
            clashes now we have all top level classes. Also make each class implement
            our EventAction marker interface, which also adds clarity but mainly means
            we can have a single eventAction property.

            If you add any new schema actions then you need to add a block in here for it.
        -->

        <jaxb:bindings node="xs:complexType[@name='EventDetail']/xs:sequence/xs:choice">

            <!-- Rename the property for the event action and make it use the marker interface -->
            <jaxb:property name="eventAction" >
                <jaxb:baseType name="EventAction" />
            </jaxb:property>

            <jaxb:bindings node="xs:element[@name='Unknown']">
                <jaxb:bindings node="xs:complexType">
                    <jaxb:factoryMethod name="UnknownEventAction"/>
                    <jaxb:class name="UnknownEventAction" />
                    <inheritance:implements>EventAction</inheritance:implements>
                </jaxb:bindings>
            </jaxb:bindings>

        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Authenticate']">
            <jaxb:factoryMethod name="AuthenticateEventAction"/>
            <jaxb:class name="AuthenticateEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>

            <!-- Change the property name and type for the user|device|group choice -->
            <jaxb:bindings node="xs:sequence/xs:choice">
                <jaxb:property name="authenticationEntity" >
                    <jaxb:baseType name="AuthenticationEntity" />
                </jaxb:property>
            </jaxb:bindings>

        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Authorise']">
            <jaxb:factoryMethod name="AuthoriseEventAction"/>
            <jaxb:class name="AuthoriseEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>

        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Copy']">
            <jaxb:factoryMethod name="CopyEventAction"/>
            <jaxb:class name="CopyEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Move']">
            <jaxb:factoryMethod name="MoveEventAction"/>
            <jaxb:class name="MoveEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Create']">
            <jaxb:factoryMethod name="CreateEventAction"/>
            <jaxb:class name="CreateEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='View']">
            <jaxb:factoryMethod name="ViewEventAction"/>
            <jaxb:class name="ViewEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Search']">
            <jaxb:factoryMethod name="SearchEventAction"/>
            <jaxb:class name="SearchEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='BaseObjectOutcome']">
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Import']">
            <jaxb:factoryMethod name="ImportEventAction"/>
            <jaxb:class name="ImportEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Export']">
            <jaxb:factoryMethod name="ExportEventAction"/>
            <jaxb:class name="ExportEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Update']">
            <jaxb:factoryMethod name="UpdateEventAction"/>
            <jaxb:class name="UpdateEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Delete']">
            <jaxb:factoryMethod name="DeleteEventAction"/>
            <jaxb:class name="DeleteEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Process']">
            <jaxb:factoryMethod name="ProcessEventAction"/>
            <jaxb:class name="ProcessEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Print']">
            <jaxb:factoryMethod name="PrintEventAction"/>
            <jaxb:class name="PrintEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Install']">
            <jaxb:factoryMethod name="InstallEventAction"/>
            <jaxb:class name="InstallEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Uninstall']">
            <jaxb:factoryMethod name="UninstallEventAction"/>
            <jaxb:class name="UninstallEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='NetworkEventAction']">
            <!-- no rename needed as the type is already called EventAction -->
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Alert']">
            <jaxb:factoryMethod name="AlertEventAction"/>
            <jaxb:class name="AlertEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Send']">
            <jaxb:factoryMethod name="SendEventAction"/>
            <jaxb:class name="SendEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Receive']">
            <jaxb:factoryMethod name="ReceiveEventAction"/>
            <jaxb:class name="ReceiveEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings node="xs:complexType[@name='Approval']">
            <jaxb:factoryMethod name="ApprovalEventAction"/>
            <jaxb:class name="ApprovalEventAction" />
            <inheritance:implements>EventAction</inheritance:implements>
        </jaxb:bindings>

        <!-- End of EventAction stuff -->


        <!-- Rename System to SystemDetail to avoid the clash with java.lang.System -->
        <jaxb:bindings node="xs:complexType[@name='System']">
            <jaxb:factoryMethod name="SystemDetail"/>
            <jaxb:class name="SystemDetail" />
        </jaxb:bindings>

        <!-- Rename Object to OtherObject to avoid the clash with java.lang.Object -->
        <jaxb:bindings node="xs:complexType[@name='Object']">
            <jaxb:factoryMethod name="OtherObject"/>
            <jaxb:class name="OtherObject" />
        </jaxb:bindings>

        <!-- Change the property name and type for the multi object group -->
        <jaxb:bindings
            multiple="true"
            node="xs:complexType[@name='MultiObject' or @name='BaseObjectOutcome' or @name='Authorise']//xs:group[@ref='evt:MultiObjectGroup']">

            <jaxb:property name="objects" >
                <jaxb:baseType name="BaseObject" />
            </jaxb:property>
        </jaxb:bindings>

        <!-- Make all query items implement the same marker interface so we can have a List<AdvancedQueryItem> -->

        <jaxb:bindings multiple="true" node="xs:complexType[@name='Term']">
            <inheritance:implements>AdvancedQueryItem</inheritance:implements>
        </jaxb:bindings>
        <jaxb:bindings multiple="true" node="xs:complexType[@name='And' or @name='Or' or @name='Not']">
            <!-- This extends AdvancedQueryItem -->
            <inheritance:implements>AdvancedQueryOperator</inheritance:implements>
        </jaxb:bindings>

        <jaxb:bindings
            multiple="true"
            node="xs:complexType[@name='And' or @name='Or' or @name='Not']/xs:group[@ref='evt:AdvancedQueryOperatorGroup']">

            <jaxb:property name="queryItems" >
                <!-- Force it to be List<AdvancedQueryItem> instead of List<java.lang.Object> -->
                <jaxb:baseType name="AdvancedQueryItem" />
            </jaxb:property>
        </jaxb:bindings>


        <jaxb:bindings node="xs:complexType[@name='Query']">

            <jaxb:bindings node="xs:sequence/xs:element[@name='Advanced']/xs:complexType">

                <jaxb:bindings node="xs:group">
                    <jaxb:property name="queryItems" >
                        <!-- Force it to be List<AdvancedQueryItem> instead of List<java.lang.Object> -->
                        <jaxb:baseType name="AdvancedQueryItem" />
                    </jaxb:property>
                </jaxb:bindings>

                <jaxb:factoryMethod name="AdvancedQuery"/>
                <jaxb:class name="AdvancedQuery" />
            </jaxb:bindings>

            <jaxb:bindings node="xs:sequence/xs:element[@name='Simple']/xs:complexType">
                <jaxb:factoryMethod name="SimpleQuery"/>
                <jaxb:class name="SimpleQuery" />
            </jaxb:bindings>

        </jaxb:bindings>

        <!-- AuthorisationSimpleType in schema -->
        <jaxb:bindings node="xs:simpleType[@name='Authorisation']">
            <jaxb:typesafeEnumClass name="AuthorisationActionType"/>
        </jaxb:bindings>

    </jaxb:bindings> <!-- /xs:schema -->
</jaxb:bindings>

<!-- vim:set expandtab shiftwidth=4 tabstop=4: -->
