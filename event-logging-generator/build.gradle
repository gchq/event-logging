ext.moduleName = 'event.logging.generator'

def schemaDir = project.file('schema')

// In this section you declare the dependencies for your production and test code
dependencies {
    
    implementation "org.glassfish.jaxb:jaxb-xjc:${versions.jaxb_xjc}"
    implementation "org.slf4j:slf4j-api:${versions.slf4j}"
    runtime "org.glassfish.jaxb:jaxb-runtime:${versions.jaxb_xjc}"
    runtime "net.codesup.util:jaxb2-rich-contract-plugin:${versions.jaxb_rich_contract}"
    runtime "org.jvnet.jaxb2_commons:jaxb2-basics:${versions.jaxb2_basics}"
    runtime "net.sf.saxon:Saxon-HE:${versions.saxon}"
}

task clearSchemaDir(type: Delete) {
    //ensure the import directory exists
    schemaDir.mkdirs()

    //cleans out any zip files in the contentPackImportDir
    delete fileTree(schemaDir) {
        include '**/*.xsd'
    }
}

task downloadSchema() {

    dependsOn clearSchemaDir

    doLast {
        schemaDir.mkdirs()
        if (!eventLoggingSchemaFilePath.isEmpty()) {
            println "\nWARNING: Using local schema instead of released version from GitHub\n"
            println "Reading schema from local file ${eventLoggingSchemaFilePath}"

            def schemaFile = new File(eventLoggingSchemaFilePath)

            copy {
                from schemaFile
                into schemaDir
            } 
        } else {
            println "Downloading schema from ${eventLoggingSchemaUrl}"
            //now get the visualisations pack from a different repo
            download {
                src eventLoggingSchemaUrl
                dest schemaDir
                overwrite true
            }
        }
    }
}


task runGenClasses(type: JavaExec) {

  dependsOn downloadSchema

  classpath = sourceSets.main.runtimeClasspath

  main = 'event.logging.gen.GenClasses'
}


clean{
    //the contents of src is transient so clear it out
    delete "schema"
}
