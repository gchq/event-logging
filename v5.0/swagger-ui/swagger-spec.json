{
  "openapi" : "3.0.1",
  "info" : {
    "contact" : {
      "name" : "event-logging",
      "url" : "https://github.com/gchq/event-logging"
    },
    "description" : "Various APIs for interacting with Stroom and its data",
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title" : "Event Logging API",
    "version" : "v1/v2"
  },
  "servers" : [ {
    "url" : "/api"
  } ],
  "security" : [ {
    "ApiKeyAuth" : [ ]
  } ],
  "paths" : {
    "/event/schema_v4_0" : {
      "post" : {
        "operationId" : "log_event_v4_0",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Event"
              }
            }
          },
          "description" : "event",
          "required" : true
        },
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "default response"
          }
        },
        "summary" : "Log an event",
        "tags" : [ "Event" ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Event" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "The classification for the event.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "eventTime" : {
            "$ref" : "#/components/schemas/EventTime",
            "description" : "This element contains information about the time the event was created.  <P> Gets the value of the eventTime property.  @return possible object is {@link EventTime }"
          },
          "eventSource" : {
            "$ref" : "#/components/schemas/EventSource",
            "description" : "This element details where the event came from, i.e. what generator created the event and on what device.  <P> Gets the value of the eventSource property.  @return possible object is {@link EventSource }"
          },
          "eventDetail" : {
            "$ref" : "#/components/schemas/EventDetail",
            "description" : "This element describes the details of what happened in the event: the type of the event, why it happened and the event action.  <P> Gets the value of the eventDetail property.  @return possible object is {@link EventDetail }"
          },
          "eventChain" : {
            "$ref" : "#/components/schemas/EventChain",
            "description" : "This element can be used to create relationships between different events, i.e. where one event is the child of another.  <P> Gets the value of the eventChain property.  @return possible object is {@link EventChain }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "required" : [ "eventTime", "eventSource", "eventDetail" ]
      },
      "AnyContent" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Object"
            },
            "description" : "This type is used to contain any content conforming to an agreed format/specification that is defined outside this XML Schema.  <P> This type is used to contain any content conforming to an agreed format/specification that is defined outside this XML Schema.Gets the value of the content property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the content property.  <p> For example, to add a new item, do as follows: <pre> getContent().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Element } {@link Object } {@link String }"
          },
          "contentType" : {
            "type" : "string",
            "description" : "String to describe the format type and specification of the content, e.g. JSON or XML. The valid values are defined outside this XML Schema.  <P> Gets the value of the contentType property.  @return possible object is {@link String }"
          },
          "version" : {
            "type" : "string",
            "description" : "Defines the version of data structure specification.  <P> Gets the value of the version property.  @return possible object is {@link String }"
          }
        }
      },
      "Object" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : { }
      },
      "Classification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "text" : {
            "type" : "string",
            "description" : "Optional full human-readable text of the protective marking that can combine the various elements in this Classification structure, e.g 'Commercial in Confidence'.  <P> Gets the value of the text property.  @return possible object is {@link String }"
          },
          "originator" : {
            "$ref" : "#/components/schemas/Organisation",
            "description" : "The originator or creator of the protectively marked item. The originator is described by an Organisation and optionally qualified by the organisation's Country.  <P> Gets the value of the originator property.  @return possible object is {@link Organisation }"
          },
          "custodian" : {
            "$ref" : "#/components/schemas/Organisation",
            "description" : "The custodian or owner of the protectively marked item. The custodian is responsible for the lifecycle of the marked item. The custodian is described by an Organisation and optionally qualified by the organisation's Country.  <P> Gets the value of the custodian property.  @return possible object is {@link Organisation }"
          },
          "classification" : {
            "type" : "string",
            "description" : "The classification of the protectively marked item. E.g. 'OFFICIAL', 'COMMERCIAL IN CONFIDENCE', 'CONFIDENTIAL', 'INTERNAL' etc.  <P> Gets the value of the classification property.  @return possible object is {@link String }"
          },
          "descriptors" : {
            "$ref" : "#/components/schemas/Descriptors",
            "description" : "Additional descriptors or keywords to further qualify the Classification e.g. 'PERSONAL'  <P> Gets the value of the descriptors property.  @return possible object is {@link Descriptors }"
          },
          "orGroups" : {
            "$ref" : "#/components/schemas/AccessControlGroups",
            "description" : "The groups that a person must belong to AT LEAST ONE OF in order to be permitted to access the protectively marked item. E.g. 'HR' OR 'Auditors'.  <P> Gets the value of the orGroups property.  @return possible object is {@link AccessControlGroups }"
          },
          "andGroups" : {
            "$ref" : "#/components/schemas/AccessControlGroups",
            "description" : "The groups that a person must belong to ALL OF in order to be permitted to access the protectively marked item. E.g. 'Sales' AND 'Management'.  <P> Gets the value of the andGroups property.  @return possible object is {@link AccessControlGroups }"
          },
          "permittedNationalities" : {
            "$ref" : "#/components/schemas/PermittedNationalities",
            "description" : "The nationalities of people permitted to access this protectively marked item. E.g. 'GBR', 'USA'  <P> Gets the value of the permittedNationalities property.  @return possible object is {@link PermittedNationalities }"
          },
          "permittedOrganisations" : {
            "$ref" : "#/components/schemas/PermittedOrganisations",
            "description" : "The organisations permitted to access the protectively marked item.  <P> Gets the value of the permittedOrganisations property.  @return possible object is {@link PermittedOrganisations }"
          },
          "disseminationControls" : {
            "$ref" : "#/components/schemas/DisseminationControls",
            "description" : "Controls governing the onward handling of the protectively marked item  <P> Gets the value of the disseminationControls property.  @return possible object is {@link DisseminationControls }"
          },
          "disposition" : {
            "$ref" : "#/components/schemas/Disposition",
            "description" : "Describes the timescale and process for the disposal of the protectively marked item  <P> Gets the value of the disposition property.  @return possible object is {@link Disposition }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        }
      },
      "Organisation" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "An ISO 3166 alpha-3 trigraph for the country the organisation belongs to. E.g. 'GBR'.  <P> Gets the value of the country property.  @return possible object is {@link String }"
          },
          "organisation" : {
            "type" : "string",
            "description" : "The code or name for the organisation. E.g. 'Group HQ', 'Telecoms Division', etc.  <P> Gets the value of the organisation property.  @return possible object is {@link String }"
          }
        },
        "required" : [ "organisation" ]
      },
      "Descriptors" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "descriptor" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Descriptor or keyword to further qualify the Classification e.g. 'PERSONAL'  <P> Gets the value of the descriptor property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the descriptor property.  <p> For example, to add a new item, do as follows: <pre> getDescriptor().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link String }"
          }
        },
        "required" : [ "descriptor" ]
      },
      "AccessControlGroups" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accessControlGroups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The name of an access control group that is used to control access to protectively marked items. E.g. 'HR', 'Auditors', 'Management', etc.  <P> Gets the value of the accessControlGroups property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the accessControlGroups property.  <p> For example, to add a new item, do as follows: <pre> getAccessControlGroups().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link String }"
          }
        },
        "required" : [ "accessControlGroups" ]
      },
      "PermittedNationalities" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "nationalities" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "An ISO 3166 alpha-3 trigraph for a nationality permitted to view this protectively marked item. E.g. 'GBR'.  <P> Gets the value of the nationalities property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the nationalities property.  <p> For example, to add a new item, do as follows: <pre> getNationalities().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link String }"
          }
        },
        "required" : [ "nationalities" ]
      },
      "PermittedOrganisations" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "permittedOrganisation" : {
            "$ref" : "#/components/schemas/Organisation",
            "description" : "An organisation permitted to access the protectively marked item. The PermittedOrganisation is described by an Organisation and optionally qualified by the organisation's country code.  <P> Gets the value of the permittedOrganisation property.  @return possible object is {@link Organisation }"
          }
        },
        "required" : [ "permittedOrganisation" ]
      },
      "DisseminationControls" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "disseminationControl" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "A policy or control governing the onward handling of a protectively marked item. E.g. ORIGINATOR_CONTROLLED  <P> Gets the value of the disseminationControl property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the disseminationControl property.  <p> For example, to add a new item, do as follows: <pre> getDisseminationControl().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link String }"
          }
        },
        "required" : [ "disseminationControl" ]
      },
      "Disposition" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "date" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "Date/time that the disposition process must be enacted by  <P> Gets the value of the date property.  @return possible object is {@link String }"
          },
          "process" : {
            "type" : "string",
            "description" : "The action to be taken on expiry of the disposition date. E.g. 'DELETE' to delete the item.  <P> Gets the value of the process property.  @return possible object is {@link String }"
          }
        },
        "required" : [ "date", "process" ]
      },
      "Data" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "A child data item that may itself have descendants.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the data item. The taxonomy of the data items may be defined by the system sending the events or defined centrally for all systems to use.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "value" : {
            "type" : "string",
            "description" : "The simple string value for the data item.  <P> Gets the value of the value property.  @return possible object is {@link String }"
          }
        },
        "required" : [ "name" ]
      },
      "EventTime" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "timeCreated" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "This element contains information about the time the event was created.  <P> Gets the value of the timeCreated property.  @return possible object is {@link String }"
          },
          "timeSource" : {
            "$ref" : "#/components/schemas/Device",
            "description" : "This is an optional element to be used to indicate the time source that the event creation time has been synchronised with. In most circumstances it is assumed that the event time has been synchronised with the corporate time service where the generating device resides so the inclusion of this element is not required.  <P> Gets the value of the timeSource property.  @return possible object is {@link Device }"
          }
        },
        "required" : [ "timeCreated" ]
      },
      "Device" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "device" ],
            "default" : "device"
          },
          "id" : {
            "type" : "string",
            "description" : "Identifier used to uniquely identify the device within the organisation's asset register/system. Also, this can be used to identify a device that does not have HostName/IPAddress/MACAddress.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "A descriptive name of the device, e.g. 'Sun Fire X4600', 'HP LaserJet 4+'.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "The security classification associated with this device.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "hostName" : {
            "type" : "string",
            "description" : "The network host name of the device, e.g. someserver.somenet.org.uk. Ideally this field should always contain a fully qualified DNS name of the host.  <P> Gets the value of the hostName property.  @return possible object is {@link String }"
          },
          "ipAddress" : {
            "type" : "string"
          },
          "macAddress" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "description" : "The network port that is being used on the device, e.g. 443.  <P> Gets the value of the port property.  @return possible object is {@link Integer }"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location",
            "description" : "Describes the geographic location of the device.  <P> Gets the value of the location property.  @return possible object is {@link Location }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          },
          "ipaddress" : {
            "type" : "string"
          },
          "macaddress" : {
            "type" : "string"
          }
        },
        "title" : "device",
        "required" : [ "@type" ]
      },
      "Location" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "The ISO-3166 country short name, e.g. 'UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND' or 'ANDORRA'  <P> Gets the value of the country property.  @return possible object is {@link String }"
          },
          "state" : {
            "type" : "string",
            "description" : "The location State or Province.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "city" : {
            "type" : "string",
            "description" : "The location City.  <P> Gets the value of the city property.  @return possible object is {@link String }"
          },
          "town" : {
            "type" : "string",
            "description" : "The location Town.  <P> Gets the value of the town property.  @return possible object is {@link String }"
          },
          "site" : {
            "type" : "string",
            "description" : "The name of the site of the location, e.g. where an organisation has multiple distinct sites or campuses. Specifying the site is particularly important when the sites are in the same town/city.  <P> Gets the value of the site property.  @return possible object is {@link String }"
          },
          "building" : {
            "type" : "string",
            "description" : "The name of the building.  <P> Gets the value of the building property.  @return possible object is {@link String }"
          },
          "floor" : {
            "type" : "integer",
            "description" : "The floor of the building that the location refers to.  <P> Gets the value of the floor property.  @return possible object is {@link BigInteger }"
          },
          "room" : {
            "type" : "string",
            "description" : "The identifier (e.g. name) of the room that the location refers to.  <P> Gets the value of the room property.  @return possible object is {@link String }"
          },
          "desk" : {
            "type" : "string",
            "description" : "The identifier (e.g. name) of the desk that the location refers to.  <P> Gets the value of the desk property.  @return possible object is {@link String }"
          },
          "rack" : {
            "type" : "string",
            "description" : "The identifier for the rack/cabinet where the location refers to a rack mounted device, e.g. a rack mounted 4U server in a cabinet.  <P> Gets the value of the rack property.  @return possible object is {@link String }"
          },
          "position" : {
            "type" : "string",
            "description" : "The position of the device where the location refers to a rack mounted device in a rack/cabinet. E.g. where a 4U device occupies U positions 1-4 in a cabinet (numbered from the bottom of the cabinet, starting from 1), the position would be '1'.  <P> Gets the value of the position property.  @return possible object is {@link String }"
          },
          "timeZoneName" : {
            "type" : "string",
            "description" : "The timezone name for the location as defined by the IANA Timezone Database (https://www.iana.org/time-zones), e.g. 'Europe/London' or 'Australia/NSW'.  <P> Gets the value of the timeZoneName property.  @return possible object is {@link String }"
          },
          "coordinates" : {
            "$ref" : "#/components/schemas/Coordinates",
            "description" : "The geographic coordinates of the location (i.e. the latitude/longitude).  <P> Gets the value of the coordinates property.  @return possible object is {@link Coordinates }"
          },
          "accessZone" : {
            "type" : "string",
            "description" : "The name of a zone within a building or site with some form of access control/monitoring for entry/exit to the zone.  <P> Gets the value of the accessZone property.  @return possible object is {@link String }"
          }
        }
      },
      "Coordinates" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "latitude" : {
            "type" : "number",
            "description" : "Geographic coordinate specifying the north/south position on the earth's surface, expressed as decimal degrees from the equator (0). -90 (South) to +90 (North).  <P> Gets the value of the latitude property.  @return possible object is {@link BigDecimal }"
          },
          "longitude" : {
            "type" : "number",
            "description" : "Geographic coordinate specifying the east/west position on the earth's surface, expressed as decimal degrees from the Greenwich Meridian (0). -180 (West) to + 180 (East).  <P> Gets the value of the longitude property.  @return possible object is {@link BigDecimal }"
          }
        },
        "required" : [ "latitude", "longitude" ]
      },
      "EventSource" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "eventId" : {
            "type" : "string",
            "description" : "A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.  <P> Gets the value of the eventId property.  @return possible object is {@link String }"
          },
          "sessionId" : {
            "type" : "string",
            "description" : "Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.  <P> Gets the value of the sessionId property.  @return possible object is {@link String }"
          },
          "system" : {
            "$ref" : "#/components/schemas/SystemDetail",
            "description" : "The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.  <P> Gets the value of the system property.  @return possible object is {@link SystemDetail }"
          },
          "generator" : {
            "type" : "string",
            "description" : "The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.  <P> Gets the value of the generator property.  @return possible object is {@link String }"
          },
          "device" : {
            "$ref" : "#/components/schemas/Device",
            "description" : "A description of the device that the event generator is hosted upon.  <P> Gets the value of the device property.  @return possible object is {@link Device }"
          },
          "client" : {
            "$ref" : "#/components/schemas/Device",
            "description" : "In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.  <P> Gets the value of the client property.  @return possible object is {@link Device }"
          },
          "server" : {
            "$ref" : "#/components/schemas/Device",
            "description" : "In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.  <P> Gets the value of the server property.  @return possible object is {@link Device }"
          },
          "door" : {
            "$ref" : "#/components/schemas/Door",
            "description" : "Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.  <P> Gets the value of the door property.  @return possible object is {@link Door }"
          },
          "user" : {
            "$ref" : "#/components/schemas/User",
            "description" : "Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the <Id> element in preference to any other user identifier.  <P> Gets the value of the user property.  @return possible object is {@link User }"
          },
          "runAs" : {
            "$ref" : "#/components/schemas/User",
            "description" : "In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the <User> element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the <Id> element in preference to any other user identifier.  <P> Gets the value of the runAs property.  @return possible object is {@link User }"
          },
          "interactive" : {
            "type" : "boolean",
            "description" : "Indicates whether the event was produced as a result of direct interaction, i.e. user was directly responsible for the event being created and was present at the time it was created. This element will be false where an event may have been created after the user was present, e.g. where scheduled processing is performed or an action has been queued for execution later, as is the case when some form of asynchronous processing is used. All interactive events must provide the Id for the user. Can be omitted if true as this is the default.  <P> Gets the value of the interactive property.  @return possible object is {@link Boolean }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "required" : [ "system", "generator", "device" ]
      },
      "SystemDetail" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the system.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "An optional description of the system.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "An optional classification or protective marking of the overall system.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "environment" : {
            "type" : "string",
            "description" : "The environment describes a specific instance of a system. A system may have multiple deployment for various purposes, e.g. a development, reference or operational deployment. An instance may also be site specific e.g. a deployment at a particular data center. The way an environment is described will differ depending on the system and the way it is deployed however a good example would be REF_DC1 to indicate that the environment is a reference deployment in data center 1.  <P> Gets the value of the environment property.  @return possible object is {@link String }"
          },
          "organisation" : {
            "type" : "string",
            "description" : "Describes the organisation that owns or has responsibility for the system.  <P> Gets the value of the organisation property.  @return possible object is {@link String }"
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the system's software, e.g. 1.3.2  <P> Gets the value of the version property.  @return possible object is {@link String }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/Tags",
            "description" : "Optional tags that can be used for additional tagging or categorisation of the system. These tags allow for the grouping or filtering of similar systems.  <P> Gets the value of the tags property.  @return possible object is {@link Tags }"
          }
        },
        "required" : [ "name", "environment" ]
      },
      "Tags" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "tag" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "A categorisation tag or label, e.g. 'critical-system', 'operational-data', 'non-operational-test-data', etc.  <P> Gets the value of the tag property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the tag property.  <p> For example, to add a new item, do as follows: <pre> getTag().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link String }"
          }
        },
        "required" : [ "tag" ]
      },
      "Door" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The site-wide name/identifier for the door.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "A user readable description of the door.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location",
            "description" : "Describes the geographic location of the device.  <P> Gets the value of the location property.  @return possible object is {@link Location }"
          },
          "singleEntry" : {
            "type" : "boolean",
            "description" : "It is assumed that doors only allow for a single authenticated person to enter at a time, e.g. in the case of turnstiles. Where single entry is true this element can be omitted as this is expected by default.  <P> Gets the value of the singleEntry property.  @return possible object is {@link Boolean }"
          },
          "removeAll" : {
            "type" : "boolean",
            "description" : "This element is used to tell us to remove all access zones from the list of currently accessible zones for a user before adding a new one. This is the case whenever a user moves from one zone to another and loses all possible access to the zones they were previously in, i.e. they would need to re-authenticate to regain access rather than just pass back through the door. If not specified this element is considered to be true as most movement through a door removes access to previously accessible zones. Removal of all access zones provides anti pass-back protection.  <P> Gets the value of the removeAll property.  @return possible object is {@link Boolean }"
          },
          "addAccess" : {
            "$ref" : "#/components/schemas/AddAccess",
            "description" : "A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.  <P> Gets the value of the addAccess property.  @return possible object is {@link AddAccess }"
          }
        },
        "required" : [ "name", "location", "addAccess" ]
      },
      "AddAccess" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accessZones" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.  <P> Gets the value of the accessZones property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the accessZones property.  <p> For example, to add a new item, do as follows: <pre> getAccessZones().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link String }"
          }
        },
        "required" : [ "accessZones" ]
      },
      "User" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "user" ],
            "default" : "user"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "domain" : {
            "type" : "string",
            "description" : "The security domain that the user exists within, e.g. an Active Directory or OpenLDAP domain.  <P> Gets the value of the domain property.  @return possible object is {@link String }"
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "The email address of the user.  <P> Gets the value of the emailAddress property.  @return possible object is {@link String }"
          },
          "userDetails" : {
            "$ref" : "#/components/schemas/UserDetails",
            "description" : "The details of the person represented by the user account or identity.  <P> Gets the value of the userDetails property.  @return possible object is {@link UserDetails }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "user",
        "required" : [ "@type" ]
      },
      "Groups" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Group"
            },
            "description" : "One or more group entities, e.g. user groups or access control groups.  <P> Gets the value of the groups property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the groups property.  <p> For example, to add a new item, do as follows: <pre> getGroups().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Group }"
          }
        }
      },
      "Group" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "group" ],
            "default" : "group"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "group",
        "required" : [ "@type" ]
      },
      "Permissions" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Permission"
            },
            "description" : "A permission rule associated with an object, e.g. read and write access being granted to a user.  <P> Gets the value of the permissions property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the permissions property.  <p> For example, to add a new item, do as follows: <pre> getPermissions().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Permission }"
          }
        },
        "required" : [ "permissions" ]
      },
      "Permission" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "permissionEntity" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Group"
            }, {
              "$ref" : "#/components/schemas/User"
            } ],
            "description" : "Gets the value of the permissionEntity property.  @return possible object is {@link User } {@link Group }"
          },
          "allowAttributes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "AUTHOR", "OWNER", "READ", "WRITE", "EXECUTE" ]
            },
            "description" : "The permission attributes that have been explicitly allowed.  <P> Gets the value of the allowAttributes property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the allowAttributes property.  <p> For example, to add a new item, do as follows: <pre> getAllowAttributes().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link PermissionAttribute }"
          },
          "denyAttributes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "AUTHOR", "OWNER", "READ", "WRITE", "EXECUTE" ]
            },
            "description" : "The permission attributes that have been explicitly denied.  <P> Gets the value of the denyAttributes property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the denyAttributes property.  <p> For example, to add a new item, do as follows: <pre> getDenyAttributes().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link PermissionAttribute }"
          }
        }
      },
      "MetaDataTags" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "A categorisation tag or label  <P> Gets the value of the tags property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the tags property.  <p> For example, to add a new item, do as follows: <pre> getTags().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link String }"
          }
        },
        "required" : [ "tags" ]
      },
      "UserDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : { }
      },
      "EventDetail" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "typeId" : {
            "type" : "string",
            "description" : "A name/code/ID to uniquely identify the logical event type within the service providing the events. E.g. a Windows eventId (i.e. representing 'Failed logon', 'Change password attempt', etc.) or for application logging: SaveRecord, ViewUserRecord, ViewSearchResults, etc. The granularity will depend on the application. Typically, the number of unique TypeIds will be in the 10s. Note, the values of the TypeId are not meant to be globally consistent, they will only be relevant within that service providing the events.  <P> Gets the value of the typeId property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Some human-readable descriptive text for the event type.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "purpose" : {
            "$ref" : "#/components/schemas/Purpose",
            "description" : "The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.  <P> Gets the value of the purpose property.  @return possible object is {@link Purpose }"
          },
          "eventAction" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/AlertEventAction"
            }, {
              "$ref" : "#/components/schemas/ApprovalEventAction"
            }, {
              "$ref" : "#/components/schemas/AuthenticateEventAction"
            }, {
              "$ref" : "#/components/schemas/AuthoriseEventAction"
            }, {
              "$ref" : "#/components/schemas/CopyEventAction"
            }, {
              "$ref" : "#/components/schemas/CreateEventAction"
            }, {
              "$ref" : "#/components/schemas/DeleteEventAction"
            }, {
              "$ref" : "#/components/schemas/ExportEventAction"
            }, {
              "$ref" : "#/components/schemas/ImportEventAction"
            }, {
              "$ref" : "#/components/schemas/InstallEventAction"
            }, {
              "$ref" : "#/components/schemas/MoveEventAction"
            }, {
              "$ref" : "#/components/schemas/NetworkEventAction"
            }, {
              "$ref" : "#/components/schemas/PrintEventAction"
            }, {
              "$ref" : "#/components/schemas/ProcessEventAction"
            }, {
              "$ref" : "#/components/schemas/ReceiveEventAction"
            }, {
              "$ref" : "#/components/schemas/SearchEventAction"
            }, {
              "$ref" : "#/components/schemas/SendEventAction"
            }, {
              "$ref" : "#/components/schemas/UninstallEventAction"
            }, {
              "$ref" : "#/components/schemas/UnknownEventAction"
            }, {
              "$ref" : "#/components/schemas/UpdateEventAction"
            }, {
              "$ref" : "#/components/schemas/ViewEventAction"
            } ],
            "description" : "Gets the value of the eventAction property.  @return possible object is {@link AuthenticateEventAction } {@link AuthoriseEventAction } {@link SearchEventAction } {@link CopyEventAction } {@link MoveEventAction } {@link CreateEventAction } {@link ViewEventAction } {@link ImportEventAction } {@link ExportEventAction } {@link UpdateEventAction } {@link DeleteEventAction } {@link ProcessEventAction } {@link PrintEventAction } {@link InstallEventAction } {@link UninstallEventAction } {@link NetworkEventAction } {@link AlertEventAction } {@link SendEventAction } {@link ReceiveEventAction } {@link ApprovalEventAction } {@link UnknownEventAction }"
          }
        },
        "required" : [ "typeId" ]
      },
      "Purpose" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "The classification of this task.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "subject" : {
            "type" : "string",
            "description" : "A description of the task.  <P> Gets the value of the subject property.  @return possible object is {@link String }"
          },
          "stakeholders" : {
            "type" : "string",
            "description" : "Names of stakeholders.  <P> Gets the value of the stakeholders property.  @return possible object is {@link String }"
          },
          "justification" : {
            "type" : "string",
            "description" : "Business case supporting task.  <P> Gets the value of the justification property.  @return possible object is {@link String }"
          },
          "expectedOutcome" : {
            "type" : "string",
            "description" : "Expected outcome from task.  <P> Gets the value of the expectedOutcome property.  @return possible object is {@link String }"
          },
          "authorisations" : {
            "$ref" : "#/components/schemas/Authorisations",
            "description" : "The authorisations that were granted to allow this event action to take place.  <P> Gets the value of the authorisations property.  @return possible object is {@link Authorisations }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        }
      },
      "Authorisations" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "auth" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Auth"
            },
            "description" : "An authorisation that was granted to allow this event action to take place.  <P> Gets the value of the auth property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the auth property.  <p> For example, to add a new item, do as follows: <pre> getAuth().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Auth }"
          }
        },
        "required" : [ "auth" ]
      },
      "Auth" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "refNo" : {
            "type" : "string",
            "description" : "The reference number, code or ID for the authorisation.  <P> Gets the value of the refNo property.  @return possible object is {@link String }"
          },
          "detail" : {
            "type" : "string",
            "description" : "A textual description of the authorisation or any additional detail.  <P> Gets the value of the detail property.  @return possible object is {@link String }"
          }
        }
      },
      "AlertEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "alert" ],
            "default" : "alert"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "VULNERABILITY", "IDS", "MALWARE", "NETWORK", "CHANGE", "ERROR", "OTHER" ],
            "description" : "The type of alert that has been fired, e.g. Error, Malware, etc.  <P> Gets the value of the type property.  @return possible object is {@link AlertType }"
          },
          "severity" : {
            "type" : "string",
            "enum" : [ "INFO", "MINOR", "MAJOR", "CRITICAL" ],
            "description" : "The severity of the alert.  <P> Gets the value of the severity property.  @return possible object is {@link AlertSeverity }"
          },
          "priority" : {
            "type" : "string",
            "enum" : [ "NONE", "LOW", "NORMAL", "HIGH", "URGENT", "IMMEDIATE" ],
            "description" : "The priority of the alert.  <P> Gets the value of the priority property.  @return possible object is {@link AlertPriority }"
          },
          "subject" : {
            "type" : "string",
            "description" : "The name of the event or rule that fired or vulnerability or malware that has been scanned for or found.  <P> Gets the value of the subject property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "The descriptive message for the alert.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "ids" : {
            "$ref" : "#/components/schemas/IDS"
          },
          "malware" : {
            "$ref" : "#/components/schemas/AntiMalwareThreat",
            "description" : "Type that describes a threat identified by an anti-malware scanner.  <P> Gets the value of the malware property.  @return possible object is {@link AntiMalwareThreat }"
          },
          "network" : {
            "$ref" : "#/components/schemas/Network",
            "description" : "A type to describe part of a computer network or some activity on a network.  <P> Gets the value of the network property.  @return possible object is {@link Network }"
          },
          "change" : {
            "$ref" : "#/components/schemas/Change",
            "description" : "Any events to do with monitoring the status of files should use this element.  <P> Gets the value of the change property.  @return possible object is {@link Change }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "alert",
        "required" : [ "@type", "type" ]
      },
      "IDS" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "rule" : {
            "type" : "string",
            "description" : "The type of IDS event or rule that fired.  <P> Gets the value of the rule property.  @return possible object is {@link String }"
          },
          "source" : {
            "$ref" : "#/components/schemas/NetworkLocation",
            "description" : "The source network device involved in the IDS event.  <P> Gets the value of the source property.  @return possible object is {@link NetworkLocation }"
          },
          "destination" : {
            "$ref" : "#/components/schemas/NetworkLocation",
            "description" : "The destination network device involved in the IDS event.  <P> Gets the value of the destination property.  @return possible object is {@link NetworkLocation }"
          },
          "payload" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "Details about the payload being transmitted between the source and destination devices.  <P> Gets the value of the payload property.  @return possible object is {@link MultiObject }"
          }
        }
      },
      "NetworkLocation" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "device" : {
            "$ref" : "#/components/schemas/Device",
            "description" : "A device at the source or destination involved in the network activity.  <P> Gets the value of the device property.  @return possible object is {@link Device }"
          },
          "application" : {
            "type" : "string",
            "description" : "The application being used by the source or destination.  <P> Gets the value of the application property.  @return possible object is {@link String }"
          },
          "transportProtocol" : {
            "type" : "string",
            "enum" : [ "TCP", "UDP", "ICMP", "IGMP", "OTHER" ],
            "description" : "The transport protocol being used by the source or destination.  <P> Gets the value of the transportProtocol property.  @return possible object is {@link NetworkProtocol }"
          },
          "icmpType" : {
            "type" : "integer"
          },
          "httpMethod" : {
            "type" : "string"
          },
          "applicationProtocol" : {
            "type" : "string",
            "description" : "The application protocol being used by the source or destination.  <P> Gets the value of the applicationProtocol property.  @return possible object is {@link String }"
          },
          "port" : {
            "type" : "integer",
            "description" : "The port being used by the source or destination.  <P> Gets the value of the port property.  @return possible object is {@link Integer }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          },
          "icmptype" : {
            "type" : "integer"
          },
          "httpmethod" : {
            "type" : "string"
          }
        }
      },
      "MultiObject" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "objects" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Association"
              }, {
                "$ref" : "#/components/schemas/Banner"
              }, {
                "$ref" : "#/components/schemas/Chat"
              }, {
                "$ref" : "#/components/schemas/Configuration"
              }, {
                "$ref" : "#/components/schemas/Criteria"
              }, {
                "$ref" : "#/components/schemas/Document"
              }, {
                "$ref" : "#/components/schemas/Email"
              }, {
                "$ref" : "#/components/schemas/File"
              }, {
                "$ref" : "#/components/schemas/Folder"
              }, {
                "$ref" : "#/components/schemas/Group"
              }, {
                "$ref" : "#/components/schemas/GroupChat"
              }, {
                "$ref" : "#/components/schemas/OtherObject"
              }, {
                "$ref" : "#/components/schemas/Resource"
              }, {
                "$ref" : "#/components/schemas/SearchResults"
              }, {
                "$ref" : "#/components/schemas/Shortcut"
              }, {
                "$ref" : "#/components/schemas/User"
              }, {
                "$ref" : "#/components/schemas/VOIP"
              }, {
                "$ref" : "#/components/schemas/VirtualSession"
              } ]
            },
            "description" : "Gets the value of the objects property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the objects property.  <p> For example, to add a new item, do as follows: <pre> getObjects().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Association } {@link Banner } {@link Chat } {@link Configuration } {@link Criteria } {@link Document } {@link Email } {@link File } {@link Folder } {@link Group } {@link GroupChat } {@link OtherObject } {@link Resource } {@link SearchResults } {@link Shortcut } {@link User } {@link VOIP } {@link VirtualSession }"
          }
        }
      },
      "Association" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "association" ],
            "default" : "association"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "objects" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "The objects that have some form of link or association  <P> Gets the value of the objects property.  @return possible object is {@link MultiObject }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "association",
        "required" : [ "@type", "objects" ]
      },
      "Banner" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "banner" ],
            "default" : "banner"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "version" : {
            "type" : "string",
            "description" : "If the text of the banner is versioned then this records the version of the banner that is displayed to the user.  <P> Gets the value of the version property.  @return possible object is {@link String }"
          },
          "message" : {
            "type" : "string",
            "description" : "The message text displayed on the banner.  <P> Gets the value of the message property.  @return possible object is {@link String }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "banner",
        "required" : [ "@type" ]
      },
      "Chat" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "chat" ],
            "default" : "chat"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "sessionId" : {
            "type" : "string",
            "description" : "The ID for the chat session.  <P> Gets the value of the sessionId property.  @return possible object is {@link String }"
          },
          "room" : {
            "type" : "string",
            "description" : "The name of the chat room or group.  <P> Gets the value of the room property.  @return possible object is {@link String }"
          },
          "from" : {
            "$ref" : "#/components/schemas/User",
            "description" : "The user that initiated the chat event.  <P> Gets the value of the from property.  @return possible object is {@link User }"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "description" : "The user(s) that the chat event (or message) is directed at.  <P> Gets the value of the to property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the to property.  <p> For example, to add a new item, do as follows: <pre> getTo().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link User }"
          },
          "content" : {
            "type" : "string",
            "description" : "The chat message or content sent by the user.  <P> Gets the value of the content property.  @return possible object is {@link String }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "chat",
        "required" : [ "@type" ]
      },
      "Configuration" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "configuration" ],
            "default" : "configuration"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "configuration",
        "required" : [ "@type" ]
      },
      "Criteria" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "criteria" ],
            "default" : "criteria"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "dataSources" : {
            "$ref" : "#/components/schemas/DataSources",
            "description" : "A collection of Datasource definitions that are referenced by the criteria/query  <P> Gets the value of the dataSources property.  @return possible object is {@link DataSources }"
          },
          "query" : {
            "$ref" : "#/components/schemas/Query",
            "description" : "Structure used to describe the query associated with a search event.  <P> Gets the value of the query property.  @return possible object is {@link Query }"
          },
          "resultPage" : {
            "$ref" : "#/components/schemas/ResultPage",
            "description" : "Details of the page (or sub-set) of results actually displayed/returned to the user, if known at query time.  <P> Gets the value of the resultPage property.  @return possible object is {@link ResultPage }"
          },
          "totalResults" : {
            "type" : "integer",
            "description" : "The total number of results returned by the query, if known at query time. In situations where only a sub-set of results are displayed/returned to the user then this element represents the count of ALL results and ResultPage should be used to provide details of which results are actually viewed/returned by the user.  <P> Gets the value of the totalResults property.  @return possible object is {@link BigInteger }"
          },
          "results" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "Describes the results returned by the search if they are known at the time of the Search event (a synchronous search). If the results are not know at execution time (an asynchronous search) and will be viewed as part of a separate event then View/SearchResults can be used to model that event.  <P> Gets the value of the results property.  @return possible object is {@link MultiObject }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "criteria",
        "required" : [ "@type" ]
      },
      "DataSources" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "dataSource" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The name or path of one or more datasources or datasets that are used by a criteria/query, e.g. 'EuroVoc XML distribution' or 'hdfs://mynamenode:8020/datasets/hr/grades.xml'  <P> Gets the value of the dataSource property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the dataSource property.  <p> For example, to add a new item, do as follows: <pre> getDataSource().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link String }"
          }
        },
        "required" : [ "dataSource" ]
      },
      "Query" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An identifier to uniquely identify the query that was executed. This may be used to link the execution of a query (i.e. Search/Query/Id) with the results that are persisted and viewed at another time (i.e. View/SearchResults/Query/Id).  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the query that was executed. This may be used to link the execution of a query with the results that are persisted and viewed at another time.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "A human-readable description of what the query is searching for.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "advanced" : {
            "$ref" : "#/components/schemas/AdvancedQuery",
            "description" : "A complex boolean tree or operators and terms that describes the query.  <P> Gets the value of the advanced property.  @return possible object is {@link AdvancedQuery }"
          },
          "simple" : {
            "$ref" : "#/components/schemas/SimpleQuery",
            "description" : "A simple representation of a query using includes and excludes terms. This is suitable for simple filtered lists, e.g. for a list of names excluding \"John,Bob\".  <P> Gets the value of the simple property.  @return possible object is {@link SimpleQuery }"
          },
          "raw" : {
            "type" : "string",
            "description" : "The raw query in the query language used by the application executing the query, e.g. SQL, xpath, etc.  <P> Gets the value of the raw property.  @return possible object is {@link String }"
          }
        }
      },
      "AdvancedQuery" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "queryItems" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/And"
              }, {
                "$ref" : "#/components/schemas/Not"
              }, {
                "$ref" : "#/components/schemas/Or"
              }, {
                "$ref" : "#/components/schemas/Term"
              } ]
            },
            "description" : "Gets the value of the queryItems property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the queryItems property.  <p> For example, to add a new item, do as follows: <pre> getQueryItems().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link And } {@link Not } {@link Or } {@link Term }"
          }
        }
      },
      "And" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "and" ],
            "default" : "and"
          },
          "queryItems" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/And"
              }, {
                "$ref" : "#/components/schemas/Not"
              }, {
                "$ref" : "#/components/schemas/Or"
              }, {
                "$ref" : "#/components/schemas/Term"
              } ]
            },
            "description" : "Gets the value of the queryItems property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the queryItems property.  <p> For example, to add a new item, do as follows: <pre> getQueryItems().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link And } {@link Not } {@link Or } {@link Term }"
          }
        },
        "title" : "and",
        "required" : [ "@type" ]
      },
      "Not" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "not" ],
            "default" : "not"
          },
          "queryItems" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/And"
              }, {
                "$ref" : "#/components/schemas/Not"
              }, {
                "$ref" : "#/components/schemas/Or"
              }, {
                "$ref" : "#/components/schemas/Term"
              } ]
            },
            "description" : "Gets the value of the queryItems property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the queryItems property.  <p> For example, to add a new item, do as follows: <pre> getQueryItems().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link And } {@link Not } {@link Or } {@link Term }"
          }
        },
        "title" : "not",
        "required" : [ "@type" ]
      },
      "Or" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "or" ],
            "default" : "or"
          },
          "queryItems" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/And"
              }, {
                "$ref" : "#/components/schemas/Not"
              }, {
                "$ref" : "#/components/schemas/Or"
              }, {
                "$ref" : "#/components/schemas/Term"
              } ]
            },
            "description" : "Gets the value of the queryItems property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the queryItems property.  <p> For example, to add a new item, do as follows: <pre> getQueryItems().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link And } {@link Not } {@link Or } {@link Term }"
          }
        },
        "title" : "or",
        "required" : [ "@type" ]
      },
      "Term" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "term" ],
            "default" : "term"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the search field.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "condition" : {
            "type" : "string",
            "enum" : [ "EXISTS", "NOT_EXISTS", "CONTAINS", "NOT_CONTAINS", "EMPTY", "NOT_EMPTY", "EQUALS", "NOT_EQUALS", "GREATER_THAN", "GREATER_THAN_EQUAL_TO", "LESS_THAN", "LESS_THAN_EQUAL_TO", "STARTS_WITH", "NOT_STARTS_WITH", "REGEX", "NOT_REGEX" ],
            "description" : "The search condition, e.g. Contains, !Contains, Exists etc.  <P> Gets the value of the condition property.  @return possible object is {@link TermCondition }"
          },
          "value" : {
            "type" : "string",
            "description" : "The value that the condition is operating on.  <P> Gets the value of the value property.  @return possible object is {@link String }"
          }
        },
        "title" : "term",
        "required" : [ "@type", "name", "condition", "value" ]
      },
      "SimpleQuery" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "include" : {
            "type" : "string",
            "description" : "Values to include in the query results, typically delimited by a comma.  <P> Gets the value of the include property.  @return possible object is {@link String }"
          },
          "exclude" : {
            "type" : "string",
            "description" : "Values to exclude in the query results, typically delimited by a comma.  <P> Gets the value of the exclude property.  @return possible object is {@link String }"
          }
        }
      },
      "ResultPage" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "totalPages" : {
            "type" : "integer",
            "description" : "The number of pages/sets that make up the complete result set.  <P> Gets the value of the totalPages property.  @return possible object is {@link BigInteger }"
          },
          "perPage" : {
            "type" : "integer",
            "description" : "The maximum number of results that will be displayed per page. E.g. 10 results per page.  <P> Gets the value of the perPage property.  @return possible object is {@link BigInteger }"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The number of the page/set of results displayed/returned to the user, e.g. 3 out of 24 pages.  <P> Gets the value of the pageNumber property.  @return possible object is {@link BigInteger }"
          },
          "from" : {
            "type" : "integer",
            "description" : "The index of the first result in the page out of the full result set (inclusive), e.g. 11 (in the case of showing results 11-20 of 453)  <P> Gets the value of the from property.  @return possible object is {@link BigInteger }"
          },
          "to" : {
            "type" : "integer",
            "description" : "The index of the last result in the page out of the full result set (inclusive), e.g. 20 (in the case of showing results 11-20 of 453)  <P> Gets the value of the to property.  @return possible object is {@link BigInteger }"
          }
        }
      },
      "Document" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "document" ],
            "default" : "document"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "title" : {
            "type" : "string",
            "description" : "The title or name of the document.  <P> Gets the value of the title property.  @return possible object is {@link String }"
          },
          "reference" : {
            "type" : "string",
            "description" : "A unique code or ID that can be used to reference the document.  <P> Gets the value of the reference property.  @return possible object is {@link String }"
          },
          "version" : {
            "type" : "string",
            "description" : "The version or iteration of the document, e.g. v13 or v1.3.  <P> Gets the value of the version property.  @return possible object is {@link String }"
          },
          "path" : {
            "type" : "string",
            "description" : "The path that defines the location of the document on a file system or document management system, e.g. '/some/path/to/the/document.pdf'  <P> Gets the value of the path property.  @return possible object is {@link String }"
          },
          "created" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The date that the document was created.  <P> Gets the value of the created property.  @return possible object is {@link String }"
          },
          "modified" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The date that the document was last modified.  <P> Gets the value of the modified property.  @return possible object is {@link String }"
          },
          "accessed" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The date that the document was last accessed.  <P> Gets the value of the accessed property.  @return possible object is {@link String }"
          },
          "pages" : {
            "type" : "integer",
            "description" : "The number of pages in the document.  <P> Gets the value of the pages property.  @return possible object is {@link BigInteger }"
          },
          "size" : {
            "type" : "integer",
            "description" : "The size of the document in bytes.  <P> Gets the value of the size property.  @return possible object is {@link BigInteger }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "document",
        "required" : [ "@type" ]
      },
      "Email" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "email" ],
            "default" : "email"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "from" : {
            "$ref" : "#/components/schemas/User",
            "description" : "The user that sent the email.  <P> Gets the value of the from property.  @return possible object is {@link User }"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "description" : "The user(s) and/or distribution group(s) that the email was sent to.  <P> Gets the value of the to property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the to property.  <p> For example, to add a new item, do as follows: <pre> getTo().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link User }"
          },
          "cc" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "description" : "The user(s) and/or distribution group(s) that the email was CC'd (carbon copied) to.  <P> Gets the value of the cc property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the cc property.  <p> For example, to add a new item, do as follows: <pre> getCc().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link User }"
          },
          "bcc" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "description" : "The user(s) and/or distribution group(s) that the email was BCC'd (blind carbon copied) to.  <P> Gets the value of the bcc property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the bcc property.  <p> For example, to add a new item, do as follows: <pre> getBcc().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link User }"
          },
          "subject" : {
            "type" : "string",
            "description" : "The subject text of the email.  <P> Gets the value of the subject property.  @return possible object is {@link String }"
          },
          "content" : {
            "type" : "string",
            "description" : "The content of the email, i.e. the message body. This may be plain text or some form of rich text like HTML.  <P> Gets the value of the content property.  @return possible object is {@link String }"
          },
          "mimeType" : {
            "type" : "string",
            "description" : "The MIME (Multipurpose Internet Mail Extensions) type of the email body, i.e. the format of the message body, e.g. 'text/plain' or 'text/html'.  <P> Gets the value of the mimeType property.  @return possible object is {@link String }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "email",
        "required" : [ "@type" ]
      },
      "File" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "file" ],
            "default" : "file"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "path" : {
            "type" : "string",
            "description" : "The full system file path.  <P> Gets the value of the path property.  @return possible object is {@link String }"
          },
          "created" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The creation time of the file.  <P> Gets the value of the created property.  @return possible object is {@link String }"
          },
          "modified" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The modification time of the file.  <P> Gets the value of the modified property.  @return possible object is {@link String }"
          },
          "accessed" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The last access time of the file.  <P> Gets the value of the accessed property.  @return possible object is {@link String }"
          },
          "size" : {
            "type" : "integer",
            "description" : "The size of the file in bytes.  <P> Gets the value of the size property.  @return possible object is {@link BigInteger }"
          },
          "media" : {
            "$ref" : "#/components/schemas/Media",
            "description" : "Optional description of the media that the file exists on or that the file is being written to.  <P> Gets the value of the media property.  @return possible object is {@link Media }"
          },
          "hash" : {
            "$ref" : "#/components/schemas/Hash",
            "description" : "Describes the output of a hash function and the type of has function used.  <P> Gets the value of the hash property.  @return possible object is {@link Hash }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "file",
        "required" : [ "@type" ]
      },
      "Media" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "media" ],
            "default" : "media"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "HARD_DISK", "USB_MASS_STORAGE", "BLU_RAY", "DVD", "CD", "FLOPPY_DISK", "TAPE", "MEMORY_CARD", "OTHER" ],
            "description" : "The type of the removable media, e.g. MemoryCard  <P> Gets the value of the type property.  @return possible object is {@link MediaType }"
          },
          "id" : {
            "type" : "string",
            "description" : "The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "A friendly name for the media, possibly assigned by device monitoring system..  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "removable" : {
            "type" : "boolean",
            "description" : "Indicates if this media is removable, e.g. USB storage device or soft media such as DVD.  <P> Gets the value of the removable property.  @return possible object is {@link Boolean }"
          },
          "readWrite" : {
            "type" : "boolean",
            "description" : "Indicates if a device has read-write access. Most devices are read-write so this is assumed to be true and can therefore be omitted where this is the case.  <P> Gets the value of the readWrite property.  @return possible object is {@link Boolean }"
          },
          "capacity" : {
            "type" : "integer",
            "description" : "The capacity of the media in bytes.  <P> Gets the value of the capacity property.  @return possible object is {@link BigInteger }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "The classification of the media.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "media",
        "required" : [ "@type", "type" ]
      },
      "Hash" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "Gets the value of the value property.  @return possible object is {@link String }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of hashing algorithm used, e.g. MD5, SHA-256, etc.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          }
        }
      },
      "Folder" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "folder" ],
            "default" : "folder"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "path" : {
            "type" : "string",
            "description" : "The full system file path.  <P> Gets the value of the path property.  @return possible object is {@link String }"
          },
          "created" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The creation time of the file.  <P> Gets the value of the created property.  @return possible object is {@link String }"
          },
          "modified" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The modification time of the file.  <P> Gets the value of the modified property.  @return possible object is {@link String }"
          },
          "accessed" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The last access time of the file.  <P> Gets the value of the accessed property.  @return possible object is {@link String }"
          },
          "size" : {
            "type" : "integer",
            "description" : "The size of the file in bytes.  <P> Gets the value of the size property.  @return possible object is {@link BigInteger }"
          },
          "media" : {
            "$ref" : "#/components/schemas/Media",
            "description" : "Optional description of the media that the file exists on or that the file is being written to.  <P> Gets the value of the media property.  @return possible object is {@link Media }"
          },
          "hash" : {
            "$ref" : "#/components/schemas/Hash",
            "description" : "Describes the output of a hash function and the type of has function used.  <P> Gets the value of the hash property.  @return possible object is {@link Hash }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "folder",
        "required" : [ "@type" ]
      },
      "GroupChat" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "groupChat" ],
            "default" : "groupChat"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "sessionId" : {
            "type" : "string",
            "description" : "The ID for the chat session.  <P> Gets the value of the sessionId property.  @return possible object is {@link String }"
          },
          "room" : {
            "type" : "string",
            "description" : "The name of the chat room or group.  <P> Gets the value of the room property.  @return possible object is {@link String }"
          },
          "from" : {
            "$ref" : "#/components/schemas/User",
            "description" : "The user that initiated the chat event.  <P> Gets the value of the from property.  @return possible object is {@link User }"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "description" : "The user(s) that the chat event (or message) is directed at.  <P> Gets the value of the to property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the to property.  <p> For example, to add a new item, do as follows: <pre> getTo().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link User }"
          },
          "content" : {
            "type" : "string",
            "description" : "The chat message or content sent by the user.  <P> Gets the value of the content property.  @return possible object is {@link String }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "groupChat",
        "required" : [ "@type" ]
      },
      "OtherObject" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "otherObject" ],
            "default" : "otherObject"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "otherObject",
        "required" : [ "@type" ]
      },
      "Resource" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "resource" ],
            "default" : "resource"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the resource or of the object the resource presents.  <P> Gets the value of the title property.  @return possible object is {@link String }"
          },
          "url" : {
            "type" : "string"
          },
          "referrer" : {
            "type" : "string",
            "description" : "The URL of the resource that referred to the URL of this event  <P> Gets the value of the referrer property.  @return possible object is {@link String }"
          },
          "sessionId" : {
            "type" : "string",
            "description" : "The session identifier or token used to identify a session or series of related message exchanges.  <P> Gets the value of the sessionId property.  @return possible object is {@link String }"
          },
          "httpMethod" : {
            "type" : "string"
          },
          "httpVersion" : {
            "type" : "string"
          },
          "userAgent" : {
            "type" : "string",
            "description" : "This is a string provided by the initiating software agent used to identify itself, its application type, operating system, software vendor or software version. This string typically appears as a field in a request message with a field header name of 'User-Agent'.  <P> Gets the value of the userAgent property.  @return possible object is {@link String }"
          },
          "inboundSize" : {
            "type" : "integer",
            "description" : "The size in bytes received, including the request and HTTP headers.  <P> Gets the value of the inboundSize property.  @return possible object is {@link BigInteger }"
          },
          "inboundContentSize" : {
            "type" : "integer",
            "description" : "The size in bytes of the incoming data, EXCLUDING HTTP headers.  <P> Gets the value of the inboundContentSize property.  @return possible object is {@link BigInteger }"
          },
          "inboundHeader" : {
            "type" : "string",
            "description" : "The HTTP request header.  <P> Gets the value of the inboundHeader property.  @return possible object is {@link String }"
          },
          "outboundSize" : {
            "type" : "integer",
            "description" : "The size in bytes of the outgoing data, including HTTP headers.  <P> Gets the value of the outboundSize property.  @return possible object is {@link BigInteger }"
          },
          "outboundContentSize" : {
            "type" : "integer",
            "description" : "The size in bytes of the outgoing data, EXCLUDING HTTP headers.  <P> Gets the value of the outboundContentSize property.  @return possible object is {@link BigInteger }"
          },
          "outboundHeader" : {
            "type" : "string",
            "description" : "The HTTP response header.  <P> Gets the value of the outboundHeader property.  @return possible object is {@link String }"
          },
          "requestTime" : {
            "type" : "integer",
            "description" : "The number of microseconds the server took to handle the request.  <P> Gets the value of the requestTime property.  @return possible object is {@link BigInteger }"
          },
          "connectionStatus" : {
            "type" : "string",
            "description" : "The connection status of the client connection.  <P> Gets the value of the connectionStatus property.  @return possible object is {@link String }"
          },
          "initialResponseCode" : {
            "type" : "string",
            "description" : "The status code of the original request.  <P> Gets the value of the initialResponseCode property.  @return possible object is {@link String }"
          },
          "responseCode" : {
            "type" : "string",
            "description" : "The final status code of the request, after any internal redirections may have taken place.  <P> Gets the value of the responseCode property.  @return possible object is {@link String }"
          },
          "mimeType" : {
            "type" : "string",
            "description" : "The Internet Media Type identifying the file format of the resource provided (format of request or response body). This string typically appears in the 'Content-Type' field of a Request or Response Header.  <P> Gets the value of the mimeType property.  @return possible object is {@link String }"
          },
          "category" : {
            "type" : "string",
            "description" : "The category of a web page or resource where a categorisation engine is used, e.g. News, Search Engine, Social Media, etc.  <P> Gets the value of the category property.  @return possible object is {@link String }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          },
          "httpmethod" : {
            "type" : "string"
          },
          "httpversion" : {
            "type" : "string"
          }
        },
        "title" : "resource",
        "required" : [ "@type" ]
      },
      "SearchResults" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "searchResults" ],
            "default" : "searchResults"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "dataSources" : {
            "$ref" : "#/components/schemas/DataSources",
            "description" : "A collection of Datasource definitions that are referenced by the criteria/query  <P> Gets the value of the dataSources property.  @return possible object is {@link DataSources }"
          },
          "query" : {
            "$ref" : "#/components/schemas/Query",
            "description" : "Structure used to describe the query associated with a search event.  <P> Gets the value of the query property.  @return possible object is {@link Query }"
          },
          "resultPage" : {
            "$ref" : "#/components/schemas/ResultPage",
            "description" : "Details of the page (or sub-set) of results actually displayed/returned to the user, if known at query time.  <P> Gets the value of the resultPage property.  @return possible object is {@link ResultPage }"
          },
          "totalResults" : {
            "type" : "integer",
            "description" : "The total number of results returned by the query, if known at query time. In situations where only a sub-set of results are displayed/returned to the user then this element represents the count of ALL results and ResultPage should be used to provide details of which results are actually viewed/returned by the user.  <P> Gets the value of the totalResults property.  @return possible object is {@link BigInteger }"
          },
          "results" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "Describes the results returned by the search if they are known at the time of the Search event (a synchronous search). If the results are not know at execution time (an asynchronous search) and will be viewed as part of a separate event then View/SearchResults can be used to model that event.  <P> Gets the value of the results property.  @return possible object is {@link MultiObject }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "searchResults",
        "required" : [ "@type" ]
      },
      "Shortcut" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "shortcut" ],
            "default" : "shortcut"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "path" : {
            "type" : "string",
            "description" : "The full system file path.  <P> Gets the value of the path property.  @return possible object is {@link String }"
          },
          "created" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The creation time of the file.  <P> Gets the value of the created property.  @return possible object is {@link String }"
          },
          "modified" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The modification time of the file.  <P> Gets the value of the modified property.  @return possible object is {@link String }"
          },
          "accessed" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The last access time of the file.  <P> Gets the value of the accessed property.  @return possible object is {@link String }"
          },
          "size" : {
            "type" : "integer",
            "description" : "The size of the file in bytes.  <P> Gets the value of the size property.  @return possible object is {@link BigInteger }"
          },
          "media" : {
            "$ref" : "#/components/schemas/Media",
            "description" : "Optional description of the media that the file exists on or that the file is being written to.  <P> Gets the value of the media property.  @return possible object is {@link Media }"
          },
          "hash" : {
            "$ref" : "#/components/schemas/Hash",
            "description" : "Describes the output of a hash function and the type of has function used.  <P> Gets the value of the hash property.  @return possible object is {@link Hash }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "shortcut",
        "required" : [ "@type" ]
      },
      "VOIP" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "voip" ],
            "default" : "voip"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "The phone number of the initiator of the call.  <P> Gets the value of the phoneNumber property.  @return possible object is {@link String }"
          },
          "from" : {
            "$ref" : "#/components/schemas/User",
            "description" : "The user that initiated the call.  <P> Gets the value of the from property.  @return possible object is {@link User }"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "description" : "The user that is the recipient of the call or a collection of users in the case of a conference type call.  <P> Gets the value of the to property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the to property.  <p> For example, to add a new item, do as follows: <pre> getTo().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link User }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "voip",
        "required" : [ "@type" ]
      },
      "VirtualSession" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "virtualSession" ],
            "default" : "virtualSession"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "sessionState" : {
            "type" : "string",
            "enum" : [ "PARKED", "UNPARKED" ],
            "description" : "The state of the virtual session at the time of the event.  <P> Gets the value of the sessionState property.  @return possible object is {@link VirtualSessionSessionState }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "virtualSession",
        "required" : [ "@type" ]
      },
      "AntiMalwareThreat" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "product" : {
            "$ref" : "#/components/schemas/Software",
            "description" : "Describes the anti-malware product used.  <P> Gets the value of the product property.  @return possible object is {@link Software }"
          },
          "signature" : {
            "$ref" : "#/components/schemas/Signature",
            "description" : "Describes the anti-malware signature used.  <P> Gets the value of the signature property.  @return possible object is {@link Signature }"
          },
          "threat" : {
            "$ref" : "#/components/schemas/Threat",
            "description" : "Describes the threat if one has been found.  <P> Gets the value of the threat property.  @return possible object is {@link Threat }"
          },
          "infected" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "Describes the infected item if one has been found.  <P> Gets the value of the infected property.  @return possible object is {@link MultiObject }"
          }
        }
      },
      "Software" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "software" ],
            "default" : "software"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the software asset.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the software product.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the software product, e.g. v3.1.  <P> Gets the value of the version property.  @return possible object is {@link String }"
          },
          "manufacturer" : {
            "type" : "string",
            "description" : "The manufacturer of the software product, e.g. Borland  <P> Gets the value of the manufacturer property.  @return possible object is {@link String }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "software",
        "required" : [ "@type", "name" ]
      },
      "Signature" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "version" : {
            "type" : "string",
            "description" : "The version of the signature.  <P> Gets the value of the version property.  @return possible object is {@link String }"
          },
          "updated" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "When the signature was last updated.  <P> Gets the value of the updated property.  @return possible object is {@link String }"
          }
        }
      },
      "Threat" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "category" : {
            "type" : "string",
            "enum" : [ "VIRUS", "WORM", "HACKING_TOOL", "SPYWARE", "TROJAN_HORSE", "ADWARE", "OTHER" ],
            "description" : "The category of the threat, e.g. Worm, Virus, etc.  <P> Gets the value of the category property.  @return possible object is {@link ThreatCategory }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the threat, e.g. a virus name.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          }
        },
        "required" : [ "category", "name" ]
      },
      "Network" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "network" ],
            "default" : "network"
          },
          "source" : {
            "$ref" : "#/components/schemas/NetworkLocation",
            "description" : "The source device that is attempting the network action.  <P> Gets the value of the source property.  @return possible object is {@link NetworkLocation }"
          },
          "destination" : {
            "$ref" : "#/components/schemas/NetworkLocation",
            "description" : "The destination device for the network action.  <P> Gets the value of the destination property.  @return possible object is {@link NetworkLocation }"
          },
          "processName" : {
            "type" : "string",
            "description" : "The name of the process responsible for the network action.  <P> Gets the value of the processName property.  @return possible object is {@link String }"
          },
          "payload" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "If the network action is related to message transfer from one place to another then this element describes the message.  <P> Gets the value of the payload property.  @return possible object is {@link MultiObject }"
          },
          "rule" : {
            "type" : "string",
            "description" : "The network boundary filter rule that was fired to generate this event.  <P> Gets the value of the rule property.  @return possible object is {@link String }"
          }
        },
        "title" : "network",
        "required" : [ "@type", "source" ]
      },
      "Change" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "action" : {
            "type" : "string",
            "enum" : [ "START_SCAN", "STOP_SCAN", "FILE_ADDED", "FILE_REMOVED", "FILE_MODIFIED" ],
            "description" : "The action performed by the file monitor, e.g. starting to scan files for changes, or the detection of a file change.  <P> Gets the value of the action property.  @return possible object is {@link ChangeAction }"
          },
          "before" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "Describes the last known state of the file before it was altered.  <P> Gets the value of the before property.  @return possible object is {@link MultiObject }"
          },
          "after" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "Describes the new state of the file now it has changed.  <P> Gets the value of the after property.  @return possible object is {@link MultiObject }"
          },
          "rule" : {
            "type" : "string",
            "description" : "The file monitoring rule that was fired to generate this event.  <P> Gets the value of the rule property.  @return possible object is {@link String }"
          }
        },
        "required" : [ "action" ]
      },
      "ApprovalEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "approval" ],
            "default" : "approval"
          },
          "action" : {
            "type" : "string",
            "enum" : [ "APPROVE", "ACCEPT", "REJECT", "REQUEST_APPROVAL", "OTHER" ],
            "description" : "The action that the approval event is capturing, e.g. Approve, Reject, etc.  <P> Gets the value of the action property.  @return possible object is {@link ApprovalAction }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier associated with the approval step/process.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "subject" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "The object that this approval step (or request for approval) relates to, e.g. the document being approved.  <P> Gets the value of the subject property.  @return possible object is {@link MultiObject }"
          },
          "requestors" : {
            "$ref" : "#/components/schemas/Requestors",
            "description" : "The user(s) that requested the approval, e.g. jbloggs requesting approval from a manager for his finance report.  <P> Gets the value of the requestors property.  @return possible object is {@link Requestors }"
          },
          "approvers" : {
            "$ref" : "#/components/schemas/Approvers",
            "description" : "The user(s) that are providing the approval, e.g. a user requesting approval from manager fsmith for his finance report.  <P> Gets the value of the approvers property.  @return possible object is {@link Approvers }"
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for the approval/rejection/request, e.g. why the approval was rejected.  <P> Gets the value of the reason property.  @return possible object is {@link String }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "approval",
        "required" : [ "@type", "action" ]
      },
      "Requestors" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "requestors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "description" : "A user that requested the approval, e.g. jbloggs requesting approval from a manager for his finance report.  <P> Gets the value of the requestors property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the requestors property.  <p> For example, to add a new item, do as follows: <pre> getRequestors().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link User }"
          }
        },
        "required" : [ "requestors" ]
      },
      "Approvers" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "approvers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "description" : "The user that is providing the approval, e.g. a user requesting approval from manager fsmith for his finance report.  <P> Gets the value of the approvers property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the approvers property.  <p> For example, to add a new item, do as follows: <pre> getApprovers().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link User }"
          }
        },
        "required" : [ "approvers" ]
      },
      "Outcome" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "outcome" ],
            "default" : "outcome"
          },
          "success" : {
            "type" : "boolean",
            "description" : "If the outcome of an event was successful then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.  <P> Gets the value of the success property.  @return possible object is {@link Boolean }"
          },
          "permitted" : {
            "type" : "boolean",
            "description" : "If an action was permitted then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.  <P> Gets the value of the permitted property.  @return possible object is {@link Boolean }"
          },
          "authService" : {
            "$ref" : "#/components/schemas/AuthService",
            "description" : "A description of the authorisation service that was used to decide if the action was permitted.  <P> Gets the value of the authService property.  @return possible object is {@link AuthService }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable text that describes the outcome.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "outcome",
        "required" : [ "@type" ]
      },
      "AuthService" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An identifier for the authorisation service, usually a URI string.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "cacheTimeout" : {
            "type" : "integer",
            "description" : "The number of seconds a system is allowed to cache this authorisation before it needs to be checked again.  <P> Gets the value of the cacheTimeout property.  @return possible object is {@link BigInteger }"
          }
        }
      },
      "AuthenticateEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "authenticate" ],
            "default" : "authenticate"
          },
          "action" : {
            "type" : "string",
            "enum" : [ "LOGON", "LOGOFF", "CHANGE_PASSWORD", "RESET_PASSWORD", "SCREEN_LOCK", "SCREEN_UNLOCK", "ACCOUNT_LOCK", "ACCOUNT_UNLOCK", "RECONNECT", "DISCONNECT", "CONNECT", "ELEVATE_PRIVILEGE", "READ_TOKEN", "OTHER" ],
            "description" : "The authentication action that was performed, e.g. Logon, Logoff.  <P> Gets the value of the action property.  @return possible object is {@link AuthenticateAction }"
          },
          "logonType" : {
            "type" : "string",
            "enum" : [ "INTERACTIVE", "NETWORK", "BATCH", "SERVICE", "UNLOCK", "NETWORK_CLEARTEXT", "NEW_CREDENTIALS", "REMOTE_INTERACTIVE", "CACHED_INTERACTIVE", "CACHED_REMOTE_INTERACTIVE", "CACHED_UNLOCK", "PROXY", "PHYSICAL_ACCESS", "OTHER" ],
            "description" : "This indicates the type of logon. For example, Microsoft Windows has several logon types such as Interactive (logon to domain), RemoteInteractive (logon to remote machine), CachedInteractive (logon to local machine using cached domain information due to loss of network).  <P> Gets the value of the logonType property.  @return possible object is {@link AuthenticateLogonType }"
          },
          "authenticationEntity" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Device"
            }, {
              "$ref" : "#/components/schemas/Group"
            }, {
              "$ref" : "#/components/schemas/User"
            } ],
            "description" : "Gets the value of the authenticationEntity property.  @return possible object is {@link User } {@link Device } {@link Group }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/AuthenticateOutcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link AuthenticateOutcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "authenticate",
        "required" : [ "@type", "action" ]
      },
      "AuthenticateOutcome" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "authenticateOutcome" ],
            "default" : "authenticateOutcome"
          },
          "success" : {
            "type" : "boolean",
            "description" : "If the outcome of an event was successful then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.  <P> Gets the value of the success property.  @return possible object is {@link Boolean }"
          },
          "permitted" : {
            "type" : "boolean",
            "description" : "If an action was permitted then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.  <P> Gets the value of the permitted property.  @return possible object is {@link Boolean }"
          },
          "authService" : {
            "$ref" : "#/components/schemas/AuthService",
            "description" : "A description of the authorisation service that was used to decide if the action was permitted.  <P> Gets the value of the authService property.  @return possible object is {@link AuthService }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable text that describes the outcome.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "reason" : {
            "type" : "string",
            "enum" : [ "INCORRECT_USERNAME_OR_PASSWORD", "INCORRECT_USERNAME", "INCORRECT_PASSWORD", "EXPIRED_CERTIFICATE", "REVOKED_CERTIFICATE", "INCORRECT_CA", "EXPIRED_CA", "ACCOUNT_LOCKED", "ACCOUNT_NOT_VALID_FOR_LOGIN_TYPE", "OTHER" ],
            "description" : "An enumeration used to describe the reason why authentication failed.  <P> Gets the value of the reason property.  @return possible object is {@link AuthenticateOutcomeReason }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "authenticateOutcome",
        "required" : [ "@type" ]
      },
      "AuthoriseEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "authorise" ],
            "default" : "authorise"
          },
          "objects" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Association"
              }, {
                "$ref" : "#/components/schemas/Banner"
              }, {
                "$ref" : "#/components/schemas/Chat"
              }, {
                "$ref" : "#/components/schemas/Configuration"
              }, {
                "$ref" : "#/components/schemas/Criteria"
              }, {
                "$ref" : "#/components/schemas/Document"
              }, {
                "$ref" : "#/components/schemas/Email"
              }, {
                "$ref" : "#/components/schemas/File"
              }, {
                "$ref" : "#/components/schemas/Folder"
              }, {
                "$ref" : "#/components/schemas/Group"
              }, {
                "$ref" : "#/components/schemas/GroupChat"
              }, {
                "$ref" : "#/components/schemas/OtherObject"
              }, {
                "$ref" : "#/components/schemas/Resource"
              }, {
                "$ref" : "#/components/schemas/SearchResults"
              }, {
                "$ref" : "#/components/schemas/Shortcut"
              }, {
                "$ref" : "#/components/schemas/User"
              }, {
                "$ref" : "#/components/schemas/VOIP"
              }, {
                "$ref" : "#/components/schemas/VirtualSession"
              } ]
            },
            "description" : "Gets the value of the objects property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the objects property.  <p> For example, to add a new item, do as follows: <pre> getObjects().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Association } {@link Banner } {@link Chat } {@link Configuration } {@link Criteria } {@link Document } {@link Email } {@link File } {@link Folder } {@link Group } {@link GroupChat } {@link OtherObject } {@link Resource } {@link SearchResults } {@link Shortcut } {@link User } {@link VOIP } {@link VirtualSession }"
          },
          "action" : {
            "type" : "string",
            "enum" : [ "REQUEST", "MODIFY" ],
            "description" : "The type of the event action, e.g. a modification to authorisation rules/groups or the request to be authorised.  <P> Gets the value of the action property.  @return possible object is {@link AuthorisationActionType }"
          },
          "addGroups" : {
            "$ref" : "#/components/schemas/AddGroups",
            "description" : "A list of roles or permissions that have been added to an object.  <P> Gets the value of the addGroups property.  @return possible object is {@link AddGroups }"
          },
          "removeGroups" : {
            "$ref" : "#/components/schemas/RemoveGroups",
            "description" : "A list of roles or permissions that have been removed from an object.  <P> Gets the value of the removeGroups property.  @return possible object is {@link RemoveGroups }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "authorise",
        "required" : [ "@type" ]
      },
      "AddGroups" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Group"
            },
            "description" : "A role or permission that has been added to an object.  <P> Gets the value of the groups property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the groups property.  <p> For example, to add a new item, do as follows: <pre> getGroups().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Group }"
          }
        }
      },
      "RemoveGroups" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Group"
            },
            "description" : "A role or permission that has been removed from an object.  <P> Gets the value of the groups property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the groups property.  <p> For example, to add a new item, do as follows: <pre> getGroups().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Group }"
          }
        }
      },
      "CopyEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "copy" ],
            "default" : "copy"
          },
          "source" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "The source of the data being copied.  <P> Gets the value of the source property.  @return possible object is {@link MultiObject }"
          },
          "destination" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "The destination for the data being copied.  <P> Gets the value of the destination property.  @return possible object is {@link MultiObject }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/CopyMoveOutcome",
            "description" : "Used to determine if the copy was successful. If omitted it is assumed that the copy was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link CopyMoveOutcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "copy",
        "required" : [ "@type", "source", "destination" ]
      },
      "CopyMoveOutcome" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "copyMoveOutcome" ],
            "default" : "copyMoveOutcome"
          },
          "success" : {
            "type" : "boolean",
            "description" : "If the outcome of an event was successful then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.  <P> Gets the value of the success property.  @return possible object is {@link Boolean }"
          },
          "permitted" : {
            "type" : "boolean",
            "description" : "If an action was permitted then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.  <P> Gets the value of the permitted property.  @return possible object is {@link Boolean }"
          },
          "authService" : {
            "$ref" : "#/components/schemas/AuthService",
            "description" : "A description of the authorisation service that was used to decide if the action was permitted.  <P> Gets the value of the authService property.  @return possible object is {@link AuthService }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable text that describes the outcome.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "reason" : {
            "type" : "string",
            "enum" : [ "DEVICE_FULL", "IO_ERROR", "INVALID_PATH", "PERMISSION_DENIED", "READ_ONLY" ],
            "description" : "Used to explain the reason for failure, e.g. Device full.  <P> Gets the value of the reason property.  @return possible object is {@link CopyMoveOutcomeReason }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "copyMoveOutcome",
        "required" : [ "@type" ]
      },
      "CreateEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "create" ],
            "default" : "create"
          },
          "objects" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Association"
              }, {
                "$ref" : "#/components/schemas/Banner"
              }, {
                "$ref" : "#/components/schemas/Chat"
              }, {
                "$ref" : "#/components/schemas/Configuration"
              }, {
                "$ref" : "#/components/schemas/Criteria"
              }, {
                "$ref" : "#/components/schemas/Document"
              }, {
                "$ref" : "#/components/schemas/Email"
              }, {
                "$ref" : "#/components/schemas/File"
              }, {
                "$ref" : "#/components/schemas/Folder"
              }, {
                "$ref" : "#/components/schemas/Group"
              }, {
                "$ref" : "#/components/schemas/GroupChat"
              }, {
                "$ref" : "#/components/schemas/OtherObject"
              }, {
                "$ref" : "#/components/schemas/Resource"
              }, {
                "$ref" : "#/components/schemas/SearchResults"
              }, {
                "$ref" : "#/components/schemas/Shortcut"
              }, {
                "$ref" : "#/components/schemas/User"
              }, {
                "$ref" : "#/components/schemas/VOIP"
              }, {
                "$ref" : "#/components/schemas/VirtualSession"
              } ]
            },
            "description" : "Gets the value of the objects property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the objects property.  <p> For example, to add a new item, do as follows: <pre> getObjects().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Association } {@link Banner } {@link Chat } {@link Configuration } {@link Criteria } {@link Document } {@link Email } {@link File } {@link Folder } {@link Group } {@link GroupChat } {@link OtherObject } {@link Resource } {@link SearchResults } {@link Shortcut } {@link User } {@link VOIP } {@link VirtualSession }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "create",
        "required" : [ "@type" ]
      },
      "DeleteEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "delete" ],
            "default" : "delete"
          },
          "objects" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Association"
              }, {
                "$ref" : "#/components/schemas/Banner"
              }, {
                "$ref" : "#/components/schemas/Chat"
              }, {
                "$ref" : "#/components/schemas/Configuration"
              }, {
                "$ref" : "#/components/schemas/Criteria"
              }, {
                "$ref" : "#/components/schemas/Document"
              }, {
                "$ref" : "#/components/schemas/Email"
              }, {
                "$ref" : "#/components/schemas/File"
              }, {
                "$ref" : "#/components/schemas/Folder"
              }, {
                "$ref" : "#/components/schemas/Group"
              }, {
                "$ref" : "#/components/schemas/GroupChat"
              }, {
                "$ref" : "#/components/schemas/OtherObject"
              }, {
                "$ref" : "#/components/schemas/Resource"
              }, {
                "$ref" : "#/components/schemas/SearchResults"
              }, {
                "$ref" : "#/components/schemas/Shortcut"
              }, {
                "$ref" : "#/components/schemas/User"
              }, {
                "$ref" : "#/components/schemas/VOIP"
              }, {
                "$ref" : "#/components/schemas/VirtualSession"
              } ]
            },
            "description" : "Gets the value of the objects property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the objects property.  <p> For example, to add a new item, do as follows: <pre> getObjects().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Association } {@link Banner } {@link Chat } {@link Configuration } {@link Criteria } {@link Document } {@link Email } {@link File } {@link Folder } {@link Group } {@link GroupChat } {@link OtherObject } {@link Resource } {@link SearchResults } {@link Shortcut } {@link User } {@link VOIP } {@link VirtualSession }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "delete",
        "required" : [ "@type" ]
      },
      "ExportEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "export" ],
            "default" : "export"
          },
          "source" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "The source of the data being exported.  <P> Gets the value of the source property.  @return possible object is {@link MultiObject }"
          },
          "destination" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "The destination for the data being exported.  <P> Gets the value of the destination property.  @return possible object is {@link MultiObject }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the export was successful. If omitted it is assumed that the export was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "export",
        "required" : [ "@type" ]
      },
      "ImportEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "import" ],
            "default" : "import"
          },
          "source" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "The source of the data being imported.  <P> Gets the value of the source property.  @return possible object is {@link MultiObject }"
          },
          "destination" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "The destination for the data being imported.  <P> Gets the value of the destination property.  @return possible object is {@link MultiObject }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the import was successful. If omitted it is assumed that the import was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "import",
        "required" : [ "@type" ]
      },
      "InstallEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "install" ],
            "default" : "install"
          },
          "installationEntity" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Hardware"
            }, {
              "$ref" : "#/components/schemas/Media"
            }, {
              "$ref" : "#/components/schemas/Software"
            } ],
            "description" : "Gets the value of the installationEntity property.  @return possible object is {@link Software } {@link Hardware } {@link Media }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "The outcome of the (un)installation.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "install",
        "required" : [ "@type" ]
      },
      "Hardware" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "hardware" ],
            "default" : "hardware"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "OPTICAL_DRIVE", "HARD_DISK", "USB_MASS_STORAGE", "PRINTER", "MODEM", "KEYBOARD", "MOUSE", "WEBCAM", "OTHER" ],
            "description" : "The type of hardware, e.g. hard disk drive.  <P> Gets the value of the type property.  @return possible object is {@link HardwareType }"
          },
          "id" : {
            "type" : "string",
            "description" : "A unique identifier for the piece of hardware, e.g. an asset number.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "A friendly name for the hardware, e.g. a name that has been defined in an asset management or device monitoring system.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "model" : {
            "type" : "string",
            "description" : "The model name as defined by the manufacturer.  <P> Gets the value of the model property.  @return possible object is {@link String }"
          },
          "manufacturer" : {
            "type" : "string",
            "description" : "The manufacturer of the piece of hardware.  <P> Gets the value of the manufacturer property.  @return possible object is {@link String }"
          },
          "capacity" : {
            "type" : "integer",
            "description" : "The capacity of the device in bytes.  <P> Gets the value of the capacity property.  @return possible object is {@link BigInteger }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "hardware",
        "required" : [ "@type", "type" ]
      },
      "MoveEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "move" ],
            "default" : "move"
          },
          "source" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "The source of the data being moved.  <P> Gets the value of the source property.  @return possible object is {@link MultiObject }"
          },
          "destination" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "The destination for the data being moved.  <P> Gets the value of the destination property.  @return possible object is {@link MultiObject }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/CopyMoveOutcome",
            "description" : "Used to determine if the move was successful. If omitted it is assumed that the move was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link CopyMoveOutcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "move",
        "required" : [ "@type", "source", "destination" ]
      },
      "NetworkEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "network" ],
            "default" : "network"
          },
          "bind" : {
            "$ref" : "#/components/schemas/NetworkOutcome",
            "description" : "The action of a server binding a network socket to a port and IP address.  <P> Gets the value of the bind property.  @return possible object is {@link NetworkOutcome }"
          },
          "connect" : {
            "$ref" : "#/components/schemas/NetworkOutcome",
            "description" : "The action of a client system establishing a connection with a server.  <P> Gets the value of the connect property.  @return possible object is {@link NetworkOutcome }"
          },
          "open" : {
            "$ref" : "#/components/schemas/NetworkOutcome",
            "description" : "The action of opening an unnamed socket that is bound to an address.  <P> Gets the value of the open property.  @return possible object is {@link NetworkOutcome }"
          },
          "close" : {
            "$ref" : "#/components/schemas/NetworkOutcome",
            "description" : "The action of closing an open socket or connection.  <P> Gets the value of the close property.  @return possible object is {@link NetworkOutcome }"
          },
          "send" : {
            "$ref" : "#/components/schemas/NetworkOutcome",
            "description" : "The action of sending data on a socket.  <P> Gets the value of the send property.  @return possible object is {@link NetworkOutcome }"
          },
          "receive" : {
            "$ref" : "#/components/schemas/NetworkOutcome",
            "description" : "The action of receiving data on a socket.  <P> Gets the value of the receive property.  @return possible object is {@link NetworkOutcome }"
          },
          "listen" : {
            "$ref" : "#/components/schemas/NetworkOutcome",
            "description" : "The action of making a socket listen for connections.  <P> Gets the value of the listen property.  @return possible object is {@link NetworkOutcome }"
          },
          "permit" : {
            "$ref" : "#/components/schemas/NetworkOutcome",
            "description" : "The action of network traffic being permitted by an Access Control List (ACL).  <P> Gets the value of the permit property.  @return possible object is {@link NetworkOutcome }"
          },
          "deny" : {
            "$ref" : "#/components/schemas/NetworkOutcome",
            "description" : "The action of network traffic being denied by an Access Control List (ACL).  <P> Gets the value of the deny property.  @return possible object is {@link NetworkOutcome }"
          }
        },
        "title" : "network",
        "required" : [ "@type" ]
      },
      "NetworkOutcome" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "networkOutcome" ],
            "default" : "networkOutcome"
          },
          "source" : {
            "$ref" : "#/components/schemas/NetworkLocation",
            "description" : "The source device that is attempting the network action.  <P> Gets the value of the source property.  @return possible object is {@link NetworkLocation }"
          },
          "destination" : {
            "$ref" : "#/components/schemas/NetworkLocation",
            "description" : "The destination device for the network action.  <P> Gets the value of the destination property.  @return possible object is {@link NetworkLocation }"
          },
          "processName" : {
            "type" : "string",
            "description" : "The name of the process responsible for the network action.  <P> Gets the value of the processName property.  @return possible object is {@link String }"
          },
          "payload" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "If the network action is related to message transfer from one place to another then this element describes the message.  <P> Gets the value of the payload property.  @return possible object is {@link MultiObject }"
          },
          "rule" : {
            "type" : "string",
            "description" : "The network boundary filter rule that was fired to generate this event.  <P> Gets the value of the rule property.  @return possible object is {@link String }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "networkOutcome",
        "required" : [ "@type", "source" ]
      },
      "PrintEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "print" ],
            "default" : "print"
          },
          "action" : {
            "type" : "string",
            "enum" : [ "CREATE_JOB", "CANCEL_JOB", "PAUSE_JOB", "RESUME_JOB", "START_PRINT", "FINISH_PRINT", "CANCEL_PRINT", "FAILED_PRINT", "OTHER" ],
            "description" : "The print action that was performed, e.g. CreateJob.  <P> Gets the value of the action property.  @return possible object is {@link PrintAction }"
          },
          "printJob" : {
            "$ref" : "#/components/schemas/PrintJob",
            "description" : "Describes the print job that the event relates to.  <P> Gets the value of the printJob property.  @return possible object is {@link PrintJob }"
          },
          "printSettings" : {
            "$ref" : "#/components/schemas/PrintSettings",
            "description" : "The printer settings that are to be used for the print job.  <P> Gets the value of the printSettings property.  @return possible object is {@link PrintSettings }"
          },
          "printer" : {
            "$ref" : "#/components/schemas/Device",
            "description" : "Describes the printer to use for the print job.  <P> Gets the value of the printer property.  @return possible object is {@link Device }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "print",
        "required" : [ "@type", "action", "printJob" ]
      },
      "PrintJob" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "document" : {
            "$ref" : "#/components/schemas/Document",
            "description" : "Describes the document being printed.  <P> Gets the value of the document property.  @return possible object is {@link Document }"
          },
          "pages" : {
            "type" : "integer",
            "description" : "The number of pages being printed.  <P> Gets the value of the pages property.  @return possible object is {@link BigInteger }"
          },
          "size" : {
            "type" : "integer",
            "description" : "The size of the print job in bytes.  <P> Gets the value of the size property.  @return possible object is {@link BigInteger }"
          },
          "submitted" : {
            "type" : "integer",
            "format" : "utc-millisec",
            "description" : "The time that the print job was submitted.  <P> Gets the value of the submitted property.  @return possible object is {@link String }"
          }
        },
        "required" : [ "document" ]
      },
      "PrintSettings" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "paperSize" : {
            "type" : "string",
            "description" : "The paper size, e.g. A4.  <P> Gets the value of the paperSize property.  @return possible object is {@link String }"
          },
          "orientation" : {
            "type" : "string",
            "enum" : [ "PORTRAIT", "LANDSCAPE" ],
            "description" : "The paper orientation, e.g. Portrait, Landscape.  <P> Gets the value of the orientation property.  @return possible object is {@link PrintSettingsOrientation }"
          },
          "colour" : {
            "type" : "boolean",
            "description" : "True if printing in colour. Most printing is performed in black and white so this defaults to false and can therefore be omitted if printing in black and white.  <P> Gets the value of the colour property.  @return possible object is {@link Boolean }"
          },
          "deviceFonts" : {
            "type" : "boolean",
            "description" : "True if fonts are to be used on the printing device. Using device fonts reduces the size of the print job as no font information needs to be supplied to the printer. However, using device fonts will result in different output on different printers. Most print jobs will not use device fonts so this defaults to false and can therefore be omitted if device fonts are not being used.  <P> Gets the value of the deviceFonts property.  @return possible object is {@link Boolean }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        }
      },
      "ProcessEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "process" ],
            "default" : "process"
          },
          "action" : {
            "type" : "string",
            "enum" : [ "STARTUP", "SHUTDOWN", "EXECUTE", "TERMINATE", "CHANGE_DIR", "CALL", "ACCESS", "REQUEST_OBJECT_HANDLE", "REGISTER" ],
            "description" : "The action that the process event is capturing, e.g. Startup, Shutdown.  <P> Gets the value of the action property.  @return possible object is {@link ProcessAction }"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "OS", "SERVICE", "APPLICATION" ],
            "description" : "The type of process, e.g. Application, OS, Service.  <P> Gets the value of the type property.  @return possible object is {@link ProcessType }"
          },
          "command" : {
            "type" : "string",
            "description" : "The name of the process.  <P> Gets the value of the command property.  @return possible object is {@link String }"
          },
          "arguments" : {
            "type" : "string",
            "description" : "The process command arguments/parameters.  <P> Gets the value of the arguments property.  @return possible object is {@link String }"
          },
          "processId" : {
            "type" : "string",
            "description" : "The system identifier for the process.  <P> Gets the value of the processId property.  @return possible object is {@link String }"
          },
          "threadId" : {
            "type" : "integer",
            "description" : "The thread identifier for the process.  <P> Gets the value of the threadId property.  @return possible object is {@link BigInteger }"
          },
          "rule" : {
            "type" : "string",
            "description" : "The rule that was triggered when this process event happened.  <P> Gets the value of the rule property.  @return possible object is {@link String }"
          },
          "input" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "Any objects used as input to the process.  <P> Gets the value of the input property.  @return possible object is {@link MultiObject }"
          },
          "output" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "Any objects output by the process  <P> Gets the value of the output property.  @return possible object is {@link MultiObject }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "process",
        "required" : [ "@type", "action", "type", "command" ]
      },
      "ReceiveEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "receive" ],
            "default" : "receive"
          },
          "source" : {
            "$ref" : "#/components/schemas/Source",
            "description" : "The initiator(s) of the object or resource sent or received. An initiator can be a user and/or device.  <P> Gets the value of the source property.  @return possible object is {@link Source }"
          },
          "destination" : {
            "$ref" : "#/components/schemas/Destination",
            "description" : "The destination(s) of the object or resource sent or received. A destination can be a user and/or device.  <P> Gets the value of the destination property.  @return possible object is {@link Destination }"
          },
          "payload" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "If the network action is related to message transfer from one place to another then this element describes the message.  <P> Gets the value of the payload property.  @return possible object is {@link MultiObject }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "receive",
        "required" : [ "@type", "source", "destination" ]
      },
      "Source" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "endpoints" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Device"
              }, {
                "$ref" : "#/components/schemas/User"
              } ]
            },
            "description" : "Gets the value of the endpoints property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the endpoints property.  <p> For example, to add a new item, do as follows: <pre> getEndpoints().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Device } {@link User }"
          }
        }
      },
      "Destination" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "endpoints" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Device"
              }, {
                "$ref" : "#/components/schemas/User"
              } ]
            },
            "description" : "Gets the value of the endpoints property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the endpoints property.  <p> For example, to add a new item, do as follows: <pre> getEndpoints().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Device } {@link User }"
          }
        }
      },
      "SearchEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "search" ],
            "default" : "search"
          },
          "meta" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnyContent"
            },
            "description" : "This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.  <P> Gets the value of the meta property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the meta property.  <p> For example, to add a new item, do as follows: <pre> getMeta().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link AnyContent }"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.  <P> Gets the value of the type property.  @return possible object is {@link String }"
          },
          "id" : {
            "type" : "string",
            "description" : "An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the object, e.g. a filename.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of what the object is.  <P> Gets the value of the description property.  @return possible object is {@link String }"
          },
          "classification" : {
            "$ref" : "#/components/schemas/Classification",
            "description" : "Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.  <P> Gets the value of the classification property.  @return possible object is {@link Classification }"
          },
          "state" : {
            "type" : "string",
            "description" : "Any state information about the object, e.g. 'Archived'.  <P> Gets the value of the state property.  @return possible object is {@link String }"
          },
          "groups" : {
            "$ref" : "#/components/schemas/Groups",
            "description" : "Any groups associated with the object, e.g. group membership of a user account.  <P> Gets the value of the groups property.  @return possible object is {@link Groups }"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions",
            "description" : "The collection of permissions associated with the object, e.g. write access being granted to a list of named users.  <P> Gets the value of the permissions property.  @return possible object is {@link Permissions }"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MetaDataTags",
            "description" : "Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.  <P> Gets the value of the tags property.  @return possible object is {@link MetaDataTags }"
          },
          "dataSources" : {
            "$ref" : "#/components/schemas/DataSources",
            "description" : "A collection of Datasource definitions that are referenced by the criteria/query  <P> Gets the value of the dataSources property.  @return possible object is {@link DataSources }"
          },
          "query" : {
            "$ref" : "#/components/schemas/Query",
            "description" : "Structure used to describe the query associated with a search event.  <P> Gets the value of the query property.  @return possible object is {@link Query }"
          },
          "resultPage" : {
            "$ref" : "#/components/schemas/ResultPage",
            "description" : "Details of the page (or sub-set) of results actually displayed/returned to the user, if known at query time.  <P> Gets the value of the resultPage property.  @return possible object is {@link ResultPage }"
          },
          "totalResults" : {
            "type" : "integer",
            "description" : "The total number of results returned by the query, if known at query time. In situations where only a sub-set of results are displayed/returned to the user then this element represents the count of ALL results and ResultPage should be used to provide details of which results are actually viewed/returned by the user.  <P> Gets the value of the totalResults property.  @return possible object is {@link BigInteger }"
          },
          "results" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "Describes the results returned by the search if they are known at the time of the Search event (a synchronous search). If the results are not know at execution time (an asynchronous search) and will be viewed as part of a separate event then View/SearchResults can be used to model that event.  <P> Gets the value of the results property.  @return possible object is {@link MultiObject }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "search",
        "required" : [ "@type" ]
      },
      "SendEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "send" ],
            "default" : "send"
          },
          "source" : {
            "$ref" : "#/components/schemas/Source",
            "description" : "The initiator(s) of the object or resource sent or received. An initiator can be a user and/or device.  <P> Gets the value of the source property.  @return possible object is {@link Source }"
          },
          "destination" : {
            "$ref" : "#/components/schemas/Destination",
            "description" : "The destination(s) of the object or resource sent or received. A destination can be a user and/or device.  <P> Gets the value of the destination property.  @return possible object is {@link Destination }"
          },
          "payload" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "If the network action is related to message transfer from one place to another then this element describes the message.  <P> Gets the value of the payload property.  @return possible object is {@link MultiObject }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "send",
        "required" : [ "@type", "source", "destination" ]
      },
      "UninstallEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "uninstall" ],
            "default" : "uninstall"
          },
          "installationEntity" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Hardware"
            }, {
              "$ref" : "#/components/schemas/Media"
            }, {
              "$ref" : "#/components/schemas/Software"
            } ],
            "description" : "Gets the value of the installationEntity property.  @return possible object is {@link Software } {@link Hardware } {@link Media }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "The outcome of the (un)installation.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "uninstall",
        "required" : [ "@type" ]
      },
      "UnknownEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "unknown" ],
            "default" : "unknown"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "unknown",
        "required" : [ "@type" ]
      },
      "UpdateEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "update" ],
            "default" : "update"
          },
          "before" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "Describes the state of one or more object properties before it was changed.  <P> Gets the value of the before property.  @return possible object is {@link MultiObject }"
          },
          "after" : {
            "$ref" : "#/components/schemas/MultiObject",
            "description" : "Describes the state of one or more object properties after it was changed.  <P> Gets the value of the after property.  @return possible object is {@link MultiObject }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "update",
        "required" : [ "@type", "after" ]
      },
      "ViewEventAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "@type" : {
            "type" : "string",
            "enum" : [ "view" ],
            "default" : "view"
          },
          "objects" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/Association"
              }, {
                "$ref" : "#/components/schemas/Banner"
              }, {
                "$ref" : "#/components/schemas/Chat"
              }, {
                "$ref" : "#/components/schemas/Configuration"
              }, {
                "$ref" : "#/components/schemas/Criteria"
              }, {
                "$ref" : "#/components/schemas/Document"
              }, {
                "$ref" : "#/components/schemas/Email"
              }, {
                "$ref" : "#/components/schemas/File"
              }, {
                "$ref" : "#/components/schemas/Folder"
              }, {
                "$ref" : "#/components/schemas/Group"
              }, {
                "$ref" : "#/components/schemas/GroupChat"
              }, {
                "$ref" : "#/components/schemas/OtherObject"
              }, {
                "$ref" : "#/components/schemas/Resource"
              }, {
                "$ref" : "#/components/schemas/SearchResults"
              }, {
                "$ref" : "#/components/schemas/Shortcut"
              }, {
                "$ref" : "#/components/schemas/User"
              }, {
                "$ref" : "#/components/schemas/VOIP"
              }, {
                "$ref" : "#/components/schemas/VirtualSession"
              } ]
            },
            "description" : "Gets the value of the objects property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the objects property.  <p> For example, to add a new item, do as follows: <pre> getObjects().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Association } {@link Banner } {@link Chat } {@link Configuration } {@link Criteria } {@link Document } {@link Email } {@link File } {@link Folder } {@link Group } {@link GroupChat } {@link OtherObject } {@link Resource } {@link SearchResults } {@link Shortcut } {@link User } {@link VOIP } {@link VirtualSession }"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/Outcome",
            "description" : "Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.  <P> Gets the value of the outcome property.  @return possible object is {@link Outcome }"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Data"
            },
            "description" : "Any other event data that does not fit into a schema element but may be useful for the purpose of audit.  <P> Gets the value of the data property.  <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the data property.  <p> For example, to add a new item, do as follows: <pre> getData().add(newItem); </pre>   <p> Objects of the following type(s) are allowed in the list {@link Data }"
          }
        },
        "title" : "view",
        "required" : [ "@type" ]
      },
      "EventChain" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "activity" : {
            "$ref" : "#/components/schemas/Activity",
            "description" : "The event that this event has a relationship to or is referenced by.  <P> Gets the value of the activity property.  @return possible object is {@link Activity }"
          }
        },
        "required" : [ "activity" ]
      },
      "Activity" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the event that is being referenced. This will be the value of Event/EventSource/EventId on the referenced event. E.g. where an event with Event/EventSource/EventId=101 is a child of an event with Event/EventSource/EventId=99, the value in this element would be 99.  <P> Gets the value of the id property.  @return possible object is {@link String }"
          },
          "name" : {
            "type" : "string",
            "description" : "A descriptive name for the referenced event.  <P> Gets the value of the name property.  @return possible object is {@link String }"
          },
          "parent" : {
            "$ref" : "#/components/schemas/Activity",
            "description" : "The details of the event that is the parent of this referenced event. E.g. if event C is a child of event B which is a child of event A, this element would record an Id of A.  <P> Gets the value of the parent property.  @return possible object is {@link Activity }"
          }
        },
        "required" : [ "id" ]
      }
    }
  }
}
