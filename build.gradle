import java.util.regex.Pattern

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/stroom/stroom" }
    }
    dependencies {
        classpath group: 'ca.cutterslade.gradle', name: 'gradle-dependency-analyze', version: '1.2.2'
//        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
    }
}

plugins {
    //plugin for downloading content from the 'net
    id "de.undercouch.download" version "3.4.3"

    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"

    //plugin for producing a tree of task dependencies, run task 'taskTree'
    //id "com.dorongold.task-tree" version "1.3"
    id "signing"
    id "maven-publish"
}

//must be applied to all projects including root
apply plugin: 'ca.cutterslade.analyze'
apply plugin: 'io.github.gradle-nexus.publish-plugin'

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue ->
    def val;
    if (project.hasProperty(propName) && project.getProperty(propName) != "unspecified" && project.getProperty(propName) != "") {
        val = project.getProperty(propName)
        println "Using property [$propName] with value [$val]"
    } else {
        val = defaultValue
        println "Property [$propName] has no value, using default value [$val]"
    }
    return val;
}

//Extract the major version from a version str
ext.getMajorVersion = { versionStr ->
    def groups = (versionStr =~ /v([0-9]+)\..*/)
    def majorVer = groups[0][1]
    return majorVer
}


// Set this to the desired release version of the event-logging XML schema on github
// *****************************************************************************
def eventLoggingSchemaVer = "v4.0-beta.3"
// *****************************************************************************


// Set this to the last release of this repo on this branch, or earlier branches
// It is used to diff the current jaxb code against the last release
// *****************************************************************************
ext.previousReleaseVersion = "v5.0-beta.15_schema-v4.0-beta.3"
// *****************************************************************************




def VERSION_PATTERN = /^v[0-9a-zA-Z\.-]+_schema-(v[0-9a-zA-Z\.-]+)$/
def CHANGE_LOG_FILENAME = "CHANGELOG.md"
def projectGroup = "eventlogging"
def projectVersion = getPropertyOrDefault('version', "SNAPSHOT_schema-${eventLoggingSchemaVer}")
def eventLoggingSchemaMajorVer = getMajorVersion(eventLoggingSchemaVer)
def combinedVersion = "${projectVersion}"

ext.isReleaseVersion = !projectVersion.startsWith("SNAPSHOT")

if (!(projectVersion =~ /^SNAPSHOT\.*/)) {
    //Ensure the version string looks a bit like v1.2.3_schema-v4.5.6
    if (!(projectVersion =~ VERSION_PATTERN)) {
        throw new GradleException("Version [${projectVersion}] does not match pattern [${VERSION_PATTERN}], e.g. v1.2.3_schema-v4.5.6")
    }

    //Ensure the schema part of the combined version string matches eventLoggingSchemaVer
    //This makes sure we don't tag as schema vX when the jar is built with schema vY
    def matcher = (combinedVersion =~ VERSION_PATTERN)
    def schemaVerFromProjectVer = matcher[0][1]
    if (schemaVerFromProjectVer != eventLoggingSchemaVer) {
        throw new GradleException("eventLoggingSchemaVer [${eventLoggingSchemaVer}] does not match schema version part [${schemaVerFromProjectVer}] of [${combinedVersion}]")
    }

    //This is versioned build so ensure the version is in the CHANGELOG
    def changeLogFile = new File(CHANGE_LOG_FILENAME)
    def pattern = Pattern.compile(combinedVersion, Pattern.LITERAL)

    if (!changeLogFile.getText("UTF-8").find(pattern)) {
        throw new GradleException("This is a versioned build, cannot find string \"${pattern.toString()}\" in file ${CHANGE_LOG_FILENAME}, add the new version to the change log")
    }
}

//The XML Schema to use as the basis for generating the event-logging jaxb library code
ext.eventLoggingSchemaUrl = "http://github.com/gchq/event-logging-schema/releases/download/${eventLoggingSchemaVer}/event-logging-v${eventLoggingSchemaMajorVer}-client.xsd"

// For development purposes (e.g. you want to trial jaxb generation on a modified but
// un-released schema) you can do something like:
// ./gradlew clean build -PschemaFilePath=/tmp/myModifiedSchema.xsd
// This will then use this file instead of downloading the schema from github
ext.eventLoggingSchemaFilePath = getPropertyOrDefault("schemaFilePath", "")

if (!eventLoggingSchemaFilePath.isEmpty()) {

    def schemaFile = new File(eventLoggingSchemaFilePath)
    ext.eventLoggingSchemaFilePath = schemaFile.absolutePath.toString()
    println "Setting eventLoggingSchemaFilePath to ${ext.eventLoggingSchemaFilePath}"
}


// maven stuff
//group "$projectGroup"
////archivesBaseName = "eventlogging"
//version "$projectVersion"

println "Using project version:   $projectVersion"
println "Using schema version:    $eventLoggingSchemaVer"
println "Using combined version:  $combinedVersion"
println "Using namespace version: $eventLoggingSchemaMajorVer"
println "Using schema url:        $eventLoggingSchemaUrl"
println "Using schema file path:  $eventLoggingSchemaFilePath"

ext.versions = [
        //------event-logging--------------
        eventLogging         : projectVersion,
        eventLoggingAndSchema: combinedVersion,

        //------------3rd-party------------
        assertj              : '3.10.0',
        jackson              : '2.9.0',
        jaxb_xjc             : '2.3.2',
        jaxb_api             : '2.3.1',
        jaxb_rich_contract   : '2.1.0',
        jaxb2_basics         : '0.12.0',
        junit                : '5.2.0',
        logback              : '1.2.3',
        saxon                : '9.7.0-18',
        slf4j                : '1.7.25',
        zzDUMMYzz            : 'makes sorting easier'
]

allprojects {
    //apply plugin: 'maven'

    group "$projectGroup"
    ////archivesBaseName = "eventlogging"
    version "$projectVersion"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'ca.cutterslade.analyze'
    apply plugin: 'idea'
    //apply plugin: "org.javamodularity.moduleplugin"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenLocal()
        jcenter()
    }

    configurations {

        all {
            exclude group: "org.slf4j", module: "slf4j-log4j12"
            exclude group: "log4j", module: "log4j"

            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if (details.requested.name == 'log4j') {
                    details.useTarget "org.slf4j:log4j-over-slf4j:$versions.slf4j"
                }
            }
            resolutionStrategy {
                forcedModules = [
                ]
            }
        }
    }

    test {
        // Needed for junit 5
        useJUnitPlatform()
    }

    // This means the reports from our integration tests won't over-write the reports from our unit tests.
    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")

        //Use full logging for test exceptions so we can see where the failure occurred 
        testLogging {
            events "failed"
            exceptionFormat = 'full'
            showStackTraces = true
        }
    }

    clean {
        //clear out the 'out' dirs used by intelliJ
        delete "out"
    }

    //modularity.mixedJavaRelease 8

    /* This is for Java9+
    afterEvaluate {
        repositories {
            jcenter()
        }


        // These commented blocks are for compiling on j9+
        //compileJava {
            //inputs.property("moduleName", moduleName)
            //doFirst {
                //options.compilerArgs = [
                        //'--module-path', classpath.asPath,
                //]
                //classpath = files()
            //}
        //}

        //compileTestJava {
            //inputs.property("moduleName", moduleName)
            //doFirst {
                //options.compilerArgs = [
                        //'--module-path', classpath.asPath,
                        //'--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                //]
                //classpath = files()
            //}
        //}


        //javadoc {
            //options.addStringOption('-module-path', classpath.asPath)
            //options.addStringOption('Xdoclint:all,-missing', '-html5')
        //}

        jar {
            // Add in the auto module name for j9+ clients
            inputs.property("moduleName", moduleName)
            manifest {
                attributes(
                        "Automatic-Module-Name": moduleName,
                )
            }
        }
    }
    */
}



