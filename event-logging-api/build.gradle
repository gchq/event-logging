//apply plugin: 'ca.cutterslade.analyze'
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext.moduleName = 'event.logging.api'

def schemaDir = project.file('schema')
//def ossrhPassword = System.getenv('OSSRH_PASSWORD')
//def ossrhUsername = System.getenv('OSSRH_USERNAME')

// In this section you declare the dependencies for your production and test code
dependencies {
    implementation "javax.xml.bind:jaxb-api:${versions.jaxb_api}"

    // The production code uses the SLF4J logging API at compile time
    implementation "org.slf4j:slf4j-api:${versions.slf4j}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
    testImplementation "org.assertj:assertj-core:${versions.assertj}"
}

//for java plugin
//see https://docs.gradle.org/current/userguide/java_plugin.html
java {
    //package JavaDoc as part of publication
    withJavadocJar()
    //package Sources as part of publication
    withSourcesJar()
}

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes(
                "Automatic-Module-Name": moduleName,
                "Implementation-Title": "Event-Logging",
                "Implementation-Version": versions.eventLogging,
        )
    }
    version versions.eventLogging
}

javadoc {
    title = "event-logging-${versions.eventLogging}"
}

//The xjc generated javadoc will be failed by xdoclint so we have to
//disable it for this module
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption 'Xdoclint:none', '-quiet'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            // Non default artifact name
            artifactId = "event-logging"
            from components.java
            pom {
                name = "event-logging"
                description = "An API for generating and serialising audit events conforming to the event-logging XMLSchema (https://github.com/gchq/event-logging-schema)."
                url = 'https://github.com/gchq/event-logging'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developers {
                        developer {
                            id = 'at055612'
                            name = 'at055612'
                        }
                        developer {
                            id = 'gcdev373'
                            name = 'gcdev373'
                        }
                        developer {
                            id = 'stroomdev66'
                            name = 'stroomdev66'
                        }
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:gchq/event-logging.git'
                    developerConnection = 'scm:git:git@github.com:gchq/event-logging.git'
                    url = 'https://github.com/gchq/event-logging'
                }
            }         
        }
    }
}

String base64DecodeProjectProperty(String propName) {
    def encodedVal = project.findProperty(propName)
    return encodedVal == null
        ? null
        : new String(Base64.getDecoder().decode(encodedVal.toString())).trim()
}

void configureSigning(Project project) {

    // To create the GPG key do:
    //   gpg2 --gen-key 
    // To list it
    //   gpg2 --list-keys
    // To publish the public key on a keyserver
    //   gpg2 --keyserver hkp://keyserver.ubuntu.com --send-keys <your short key id>
    // To get the ascii-armour private key for use in travis env vars as base64 encoded
    //   gpg2 --armor --export-secret-keys <your short key id> | base64 -w0

    //project.signing.gnupg.keyName = project.findProperty("signingKeyId")

    project.signing {
        println "Configuring project to sign maven artifacts"
        required { project.gradle.taskGraph.hasTask("required") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = base64DecodeProjectProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")

        //println "pword: [$signingPassword]"
        //println "key: [$signingKey]"
        //println "keyId: [$signingKeyId]"

        if (signingKeyId) {
            println "Using in memory pgp key with ID"
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            println "Using in memory pgp key without ID"
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        //useGpgCmd()
        sign project.publishing.publications.mavenJava
    }
}

def hasSigningKey = project.hasProperty("signingkeyId") || project.findProperty("signingKey")
if(hasSigningKey) {
    configureSigning(project)
}

clean {
    //the contents of src is transient so clear it out
    delete "src/main/java/event"
    delete "src/main/resources/event"
    delete "src/test/java/event"
    delete "src/test/resources/event"
}

tasks.compileJava.dependsOn ':event-logging-generator:runGenClasses'

//Run a bash script to compare the currennt jaxb source with the latest released version so
//we can see what impact schema changes have had on the library
task diffAgainstLatest(type: Exec) {
    executable "../diffAgainstLatestRelease.sh"
    args "build", previousReleaseVersion
}

tasks.build.dependsOn diffAgainstLatest

