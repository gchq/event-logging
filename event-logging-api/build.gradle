//apply plugin: 'ca.cutterslade.analyze'
apply plugin: 'maven-publish'
//apply plugin: 'com.jfrog.bintray'
apply plugin: 'signing'

ext.moduleName = 'event.logging.api'

archivesBaseName = "event-logging"

def schemaDir = project.file('schema')
//def ossrhPassword = System.getenv('OSSRH_PASSWORD')
//def ossrhUsername = System.getenv('OSSRH_USERNAME')



// In this section you declare the dependencies for your production and test code
dependencies {
    compile "javax.xml.bind:jaxb-api:${versions.jaxb_api}"

    // The production code uses the SLF4J logging API at compile time
    compile "org.slf4j:slf4j-api:${versions.slf4j}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
    testCompile "org.assertj:assertj-core:${versions.assertj}"
}

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes(
                "Automatic-Module-Name": moduleName,
                "Implementation-Title": "Event-Logging",
                "Implementation-Version": versions.eventLoggingAndSchema,
        )
    }
    version versions.eventLoggingAndSchema
}

javadoc {
    title = "event-logging-${versions.eventLogging}"
}

//The xjc generated javadoc will be failed by xdoclint so we have to
//disable it for this module
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption 'Xdoclint:none', '-quiet'
    }
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    classifier = 'javadoc'
    from javadoc.destinationDir
    version versions.eventLoggingAndSchema
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    version versions.eventLoggingAndSchema
}

artifacts {
    archives sourceJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
        url "https://github.com/stroom/event-logging"
        connection 'scm:git:git@github.com:gchq/event-logging.git'
        developerConnection 'scm:git:git@github.com:gchq/event-logging.git'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            //artifactId "event-logging"
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom.withXml {
                def root = asNode()
                root.appendNode('name', project.name)
                root.children().last() + pomConfig
            }
        }
    }

    //repositories {
        //maven {
            //name = "local"
            //// change URLs to point to your repos, e.g. http://my.org/repo
            //def releasesRepoUrl = "$buildDir/repos/releases"
            //def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            //url = version.contains("SNAPSHOT") 
                //? snapshotsRepoUrl 
                //: releasesRepoUrl
        //}
    //}
}

//signing {
    //sign configurations.archives
//}

//// Don't sign archives for non release versions
//tasks.withType(Sign) {
    //onlyIf { isReleaseVersion }
//}

def hasSigningKey = project.hasProperty("signingkeyId") || project.findProperty("signingKey")
if(hasSigningKey) {
    configureSigning(project)
}

void configureSigning(Project project) {

    // To create the GPG key do:
    //   gpg2 --gen-key 
    // To list it
    //   gpg2 --list-keys
    // To publish the public key on a keyserver
    //   gpg2 --keyserver hkp://keyserver.ubuntu.com --send-keys <your short key id>
    // To get the ascii-armour private key for use in travis env vars
    //   gpg2 --armor --export-secret-keys <your short key id>

    //project.signing.gnupg.keyName = project.findProperty("signingKeyId")

    project.signing {
        println "Configuring project to sign maven artifacts"
        required { project.gradle.taskGraph.hasTask("required") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = project.findProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")

        //ext."signing.gnupg.keyName" = signingKeyId
        //ext."signing.gnupg.passphrase" = signingPassword

        //println "pword: [$signingPassword]"
        //println "key: [$signingKey]"
        //println "keyId: [$signingKeyId]"

        if (signingKeyId) {
            println "Using in memory pgp key with ID"
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            println "Using in memory pgp key without ID"
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        //useGpgCmd()
        sign publishing.publications.mavenJava
    }
}

// Uses sonotypeUsername and sonotypePassword
// See https://github.com/rwinch/gradle-publish-ossrh-sample
nexusPublishing {
    repositories {
        //sonatype()    //sonatypeUsername and sonatypePassword properties are used automatically
        //sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            ////nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            ////snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            //nexusUrl.set(uri("http://localhost:8081/service/local/"))
            //snapshotRepositoryUrl.set(uri("https://localhost:8081/content/repositories/snapshots/"))
        //}

        myNexus {
            nexusUrl = uri("http://localhost:8081/staging")
            snapshotRepositoryUrl = uri("https://localhost:8081/snapshots")
            username = "admin" // defaults to project.properties["myNexusUsername"]
            password = "admin" // defaults to project.properties["myNexusPassword"]
        }
    }
    // these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
    // If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

// Set up a local repo for testing
//publishing {
//}

//configuration for the bintray plugin for uploading maven artefacts to bintray
//see https://github.com/bintray/gradle-bintray-plugin
//run task bintrayUpload to push the files, assuming BINTRAY_USER/KEY are set as env vars
//bintray {
    ////Must never write these to log or system out
    //user = System.getenv('BINTRAY_USER') //set in Travis UI
    //key = System.getenv('BINTRAY_KEY') //set in Travis UI

    ////The maven plugin publications to push to bintray
    //publications = ['mavenJava']

    ////immediately make the artefacts public
    //publish = true

    //pkg {
        //repo = 'event-logging'
        //name = 'event-logging'
        //userOrg = 'stroom'
        //licenses = ['Apache-2.0']
        //vcsUrl = 'https://github.com/gchq/event-logging.git'
        //version {
            //name = "${versions.eventLoggingAndSchema}"
            //desc = "stroom-query-${versions.eventLoggingAndSchema}"
            //released = new Date()
            //vcsTag = "${versions.eventLoggingAndSchema}"
            //gpg {
                ////Bintray will self-sign the files
                //sign = true //Determines whether to GPG sign the files. The default is false
            //}
        //}
    //}
//}

//uploadArchives {
    //repositories {
        //mavenDeployer {

            //beforeDeployment { 
                //MavenDeployment deployment -> signing.signPom(deployment) 
            //}

            //repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                //authentication(userName: ossrhUsername, password: ossrhPassword)
            //}

            //snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                //authentication(userName: ossrhUsername, password: ossrhPassword)
            //}

            //pom.project {
                //name 'Event Logging'
                //packaging 'jar'
                //// optionally artifactId can be defined here
                //description 'API for the Event Logging XMLSchema'
                //url 'https://github.com/gchq/event-logging'

                //scm {
                    //connection 'scm:git:git@github.com:gchq/event-logging.git'
                    //developerConnection 'scm:git:git@github.com:gchq/event-logging.git'
                    //url 'https://github.com/gchq/event-logging'
                //}

                //licenses {
                    //license {
                        //name 'The Apache License, Version 2.0'
                        //url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    //}
                //}

                //developers {
                    //developer {
                        //id 'at055612'
                        //name 'at055612'
                        ////email ''
                    //}
                //}
            //}
        //}
    //}
//}

clean {
    //the contents of src is transient so clear it out
    delete "src/main/java/event"
    delete "src/main/resources/event"
    delete "src/test/java/event"
    delete "src/test/resources/event"
}

tasks.compileJava.dependsOn ':event-logging-generator:runGenClasses'

//Run a bash script to compare the currennt jaxb source with the latest released version so
//we can see what impact schema changes have had on the library
task diffAgainstLatest(type: Exec) {
    executable "../diffAgainstLatestRelease.sh"
    args "build", previousReleaseVersion
}

tasks.build.dependsOn diffAgainstLatest


